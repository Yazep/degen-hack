{"version":3,"file":"Types.js","sourceRoot":"","sources":["../../../src/utils/Types.ts"],"names":[],"mappings":"AA4CA,MAAM,CAAN,IAAY,WAEX;AAFD,WAAY,WAAW;IACrB,+DAAa,CAAA;AACf,CAAC,EAFW,WAAW,KAAX,WAAW,QAEtB","sourcesContent":["import { Chain, Hex } from \"viem\";\nimport { UserOperationStruct, SmartAccountSigner } from \"@alchemy/aa-core\";\nimport { SessionKeyManagerModule } from \"../SessionKeyManagerModule\";\nimport { ISessionStorage } from \"../interfaces/ISessionStorage.js\";\nimport { SupportedSigner } from \"@biconomy/common\";\nexport type ModuleVersion = \"V1_0_0\"; // | 'V1_0_1'\n\nexport interface BaseValidationModuleConfig {\n  entryPointAddress?: Hex;\n}\n\nexport interface ECDSAOwnershipValidationModuleConfig extends BaseValidationModuleConfig {\n  moduleAddress?: Hex;\n  version?: ModuleVersion;\n  signer: SupportedSigner;\n}\n\nexport interface ECDSAOwnershipValidationModuleConfigConstructorProps extends BaseValidationModuleConfig {\n  moduleAddress?: Hex;\n  version?: ModuleVersion;\n  signer: SmartAccountSigner;\n}\n\nexport interface SessionKeyManagerModuleConfig extends BaseValidationModuleConfig {\n  moduleAddress?: Hex;\n  version?: ModuleVersion;\n  nodeClientUrl?: string;\n  smartAccountAddress: string;\n  storageType?: StorageType;\n  sessionStorageClient?: ISessionStorage;\n}\n\nexport interface BatchedSessionRouterModuleConfig extends BaseValidationModuleConfig {\n  moduleAddress?: Hex;\n  version?: ModuleVersion;\n\n  sessionKeyManagerModule?: SessionKeyManagerModule; // could be BaseValidationModule\n\n  sessionManagerModuleAddress?: Hex;\n  nodeClientUrl?: string;\n  smartAccountAddress: string;\n  storageType?: StorageType;\n}\n\nexport enum StorageType {\n  LOCAL_STORAGE,\n}\n\nexport type SessionParams = {\n  sessionID?: string;\n  sessionSigner: SupportedSigner;\n  sessionValidationModule?: Hex;\n  additionalSessionData?: string;\n};\n\nexport type ModuleInfo = {\n  // Could be a full object of below params and that way it can be an array too!\n  // sessionParams?: SessionParams[] // where SessionParams is below four\n  sessionID?: string;\n  sessionSigner?: SupportedSigner;\n  sessionValidationModule?: Hex;\n  additionalSessionData?: string;\n  batchSessionParams?: SessionParams[];\n};\n\nexport interface SendUserOpParams extends ModuleInfo {\n  simulationType?: SimulationType;\n}\n\nexport type SimulationType = \"validation\" | \"validation_and_execution\";\n\nexport type SignerData = {\n  pbKey: string;\n  pvKey: `0x${string}`;\n  chainId?: Chain;\n};\n\nexport type CreateSessionDataResponse = {\n  data: string;\n  sessionIDInfo: Array<string>;\n};\n\nexport interface CreateSessionDataParams {\n  validUntil: number;\n  validAfter: number;\n  sessionValidationModule: Hex;\n  sessionPublicKey: Hex;\n  sessionKeyData: Hex;\n  preferredSessionId?: string;\n}\n\nexport interface MultiChainValidationModuleConfig extends BaseValidationModuleConfig {\n  moduleAddress?: Hex;\n  version?: ModuleVersion;\n  signer: SupportedSigner;\n}\nexport interface MultiChainValidationModuleConfigConstructorProps extends BaseValidationModuleConfig {\n  moduleAddress?: Hex;\n  version?: ModuleVersion;\n  signer: SmartAccountSigner;\n}\n\nexport type MultiChainUserOpDto = {\n  validUntil?: number;\n  validAfter?: number;\n  chainId: number;\n  userOp: Partial<UserOperationStruct>;\n};\n\nexport interface BaseSessionKeyData {\n  sessionKey: Hex;\n}\n\nexport interface ERC20SessionKeyData extends BaseSessionKeyData {\n  token: Hex;\n  recipient: Hex;\n  maxAmount: bigint;\n}\n\nexport interface SessionValidationModuleConfig {\n  moduleAddress: string;\n}\n"]}
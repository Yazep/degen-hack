{"version":3,"file":"ERC20SessionValidationModule.js","sourceRoot":"","sources":["../../../src/session-validation-modules/ERC20SessionValidationModule.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,mBAAmB,EAAE,kBAAkB,EAAE,MAAM,MAAM,CAAC;AAQ/D,MAAM,OAAO,4BAA4B;IAUvC,YAAoB,YAA2C;QAT/D;;;;;WAAuB;QAEvB;;;;mBAAU,QAAQ;WAAC;QAQjB,IAAI,CAAC,YAAY,CAAC,aAAa,EAAE,CAAC;YAChC,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;QAChD,CAAC;QACD,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC,aAAa,CAAC;IAClD,CAAC;IAOM,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,YAA2C;QACpE,MAAM,MAAM,GAAG,IAAI,4BAA4B,CAAC,YAAY,CAAC,CAAC;QAC9D,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,WAAgC;QACtD,IAAI,CAAC,uBAAuB,CAAC,WAAW,CAAC,CAAC;QAC1C,MAAM,cAAc,GAAG,mBAAmB,CAAC,kBAAkB,CAAC,oCAAoC,CAAC,EAAE;YACnG,WAAW,CAAC,UAAU;YACtB,WAAW,CAAC,KAAK;YACjB,WAAW,CAAC,SAAS;YACrB,WAAW,CAAC,SAAS;SACtB,CAAC,CAAC;QACH,OAAO,cAAc,CAAC;IACxB,CAAC;IAEO,uBAAuB,CAAC,WAAgC;QAC9D,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;QAC9C,CAAC;QACD,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC;YAC5B,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;QAC5D,CAAC;QACD,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;YACvB,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;QAC9D,CAAC;QACD,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC;YAC3B,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;QAClE,CAAC;QACD,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC;YAC3B,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;QAC1D,CAAC;IACH,CAAC;IAED,UAAU;QACR,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;CACF","sourcesContent":["import { ISessionValidationModule } from \"../interfaces/ISessionValidationModule.js\";\nimport { ERC20SessionKeyData, SessionValidationModuleConfig } from \"../utils/Types\";\nimport { encodeAbiParameters, parseAbiParameters } from \"viem\";\n\n/**\n * Session validation module for ERC20 token transfers.\n * It encodes session data into a sessionKeyData bytes to be verified by ERC20SessionValidationModule on chain.\n *\n * @author Sachin Tomar <sachin.tomar@biconomy.io>\n */\nexport class ERC20SessionValidationModule implements ISessionValidationModule<ERC20SessionKeyData> {\n  moduleAddress!: string;\n\n  version = \"V1_0_0\";\n\n  /**\n   * This constructor is private. Use the static create method to instantiate ERC20SessionValidationModule\n   * @param moduleConfig The configuration for the module\n   * @returns An instance of ERC20SessionValidationModule\n   */\n  private constructor(moduleConfig: SessionValidationModuleConfig) {\n    if (!moduleConfig.moduleAddress) {\n      throw new Error(\"Module address is required\");\n    }\n    this.moduleAddress = moduleConfig.moduleAddress;\n  }\n\n  /**\n   * Asynchronously creates and initializes an instance of ERC20SessionValidationModule\n   * @param moduleConfig The configuration for the module\n   * @returns A Promise that resolves to an instance of ERC20SessionValidationModule\n   */\n  public static async create(moduleConfig: SessionValidationModuleConfig): Promise<ERC20SessionValidationModule> {\n    const module = new ERC20SessionValidationModule(moduleConfig);\n    return module;\n  }\n\n  async getSessionKeyData(sessionData: ERC20SessionKeyData): Promise<string> {\n    this._validateSessionKeyData(sessionData);\n    const sessionKeyData = encodeAbiParameters(parseAbiParameters(\"address, address, address, uint256\"), [\n      sessionData.sessionKey,\n      sessionData.token,\n      sessionData.recipient,\n      sessionData.maxAmount,\n    ]);\n    return sessionKeyData;\n  }\n\n  private _validateSessionKeyData(sessionData: ERC20SessionKeyData): void {\n    if (!sessionData) {\n      throw new Error(\"Session data is required\");\n    }\n    if (!sessionData.sessionKey) {\n      throw new Error(\"Session key is required in sessionData\");\n    }\n    if (!sessionData.token) {\n      throw new Error(\"Token address is required in sessionData\");\n    }\n    if (!sessionData.recipient) {\n      throw new Error(\"Recipient address is required in sessionData\");\n    }\n    if (!sessionData.maxAmount) {\n      throw new Error(\"MaxAmount is required in sessionData\");\n    }\n  }\n\n  getAddress(): string {\n    return this.moduleAddress;\n  }\n}\n"]}
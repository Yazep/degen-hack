{"version":3,"file":"ISessionStorage.js","sourceRoot":"","sources":["../../../src/interfaces/ISessionStorage.ts"],"names":[],"mappings":"","sourcesContent":["import { Hex } from \"viem\";\nimport { SmartAccountSigner } from \"@alchemy/aa-core\";\nimport { SignerData } from \"../utils/Types\";\n\nexport type SessionStatus = \"PENDING\" | \"ACTIVE\" | \"INACTIVE\" | \"EXPIRED\";\n\nexport type SessionLeafNode = {\n  validUntil: number;\n  validAfter: number;\n  sessionValidationModule: Hex;\n  sessionKeyData: Hex;\n  sessionPublicKey: Hex;\n  sessionID?: string;\n  status: SessionStatus;\n};\n\nexport type SessionSearchParam = {\n  sessionID?: string;\n  sessionPublicKey?: Hex;\n  sessionValidationModule?: Hex;\n  status?: SessionStatus;\n};\n\nexport interface ISessionStorage {\n  /**\n   * Adds a session leaf node to the session storage\n   * @param leaf SessionLeafNode to be added to the session storage\n   */\n  addSessionData(_leaf: SessionLeafNode): Promise<void>;\n\n  /**\n   * Fetch a session leaf node from the session storage\n   * @param param SessionSearchParam to be used to fetch the session leaf node\n   */\n  getSessionData(_param: SessionSearchParam): Promise<SessionLeafNode>;\n\n  /**\n   * Updates the session status of a session leaf node in the session storage\n   * @param param SessionSearchParam to be used to fetch the session leaf node\n   * @param status New session status to be updated\n   */\n  updateSessionStatus(_param: SessionSearchParam, _status: SessionStatus): Promise<void>;\n\n  /**\n   * Clears all the pending sessions from the session storage\n   */\n  clearPendingSessions(): Promise<void>;\n\n  /**\n   * If a signer object is passed, it will be added to the session storage\n   * If no signer object is passed, it'll create a random signer and add it to the session storage\n   * @param signer Optional signer to be added to the session storage\n   */\n  addSigner(_signer?: SignerData): Promise<SmartAccountSigner>;\n\n  /**\n   * Fetch a signer from the session storage\n   * @param signerPublicKey Public key of the signer to be fetched\n   */\n  getSignerByKey(_signerPublicKey: string): Promise<SmartAccountSigner>;\n\n  /**\n   * Fetch a signer from the session storage based on the session search param\n   * @param param SessionSearchParam to be used to fetch the signer\n   */\n  getSignerBySession(_param: SessionSearchParam): Promise<SmartAccountSigner>;\n\n  /**\n   * Fetch all the session leaf nodes from the session storage based on the session search param.\n   * If no param is passed, it'll fetch all the session leaf nodes from the session storage\n   * @param param SessionSearchParam to be used to fetch the session leaf nodes\n   */\n  getAllSessionData(_param?: SessionSearchParam): Promise<SessionLeafNode[]>;\n\n  /**\n   * Fetch merkle root from the session storage\n   */\n  getMerkleRoot(): Promise<string>;\n\n  /**\n   * Set merkle root in the session storage\n   * @param merkleRoot Merkle root to be set in the session storage\n   */\n  setMerkleRoot(_merkleRoot: string): Promise<void>;\n}\n"]}
{"version":3,"file":"SessionLocalStorage.js","sourceRoot":"","sources":["../../../src/session-storage/SessionLocalStorage.ts"],"names":[],"mappings":";;;AAAA,+BAA4D;AAC5D,8CAA0E;AAE1E,wCAAsC;AACtC,4CAAwE;AAGxE,MAAa,mBAAmB;IAG9B,YAAY,mBAA2B;QAF/B;;;;;WAA4B;QAGlC,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC,WAAW,EAAE,CAAC;IAC/D,CAAC;IAEO,mBAAmB,CAAC,KAAyB;QACnD,IAAI,KAAK,CAAC,SAAS,EAAE,CAAC;YACpB,OAAO;QACT,CAAC;aAAM,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC,gBAAgB,IAAI,KAAK,CAAC,uBAAuB,EAAE,CAAC;YACvF,OAAO;QACT,CAAC;aAAM,CAAC;YACN,MAAM,IAAI,KAAK,CAAC,iGAAiG,CAAC,CAAC;QACrH,CAAC;IACH,CAAC;IAEO,eAAe;QAErB,MAAM,IAAI,GAAG,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC;QAClE,OAAO,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC;IACrE,CAAC;IAEO,cAAc;QAEpB,MAAM,IAAI,GAAG,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC;QACjE,OAAO,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IACtC,CAAC;IAEO,aAAa,CAAC,IAA4B;QAChD,OAAO,GAAG,IAAI,CAAC,mBAAmB,IAAI,IAAI,EAAE,CAAC;IAC/C,CAAC;IAEO,kBAAkB,CAAC,OAAe;QACxC,OAAO,OAAO,CAAC,WAAW,EAAE,CAAC;IAC/B,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,IAAqB;QACxC,MAAM,IAAI,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QACpC,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,uBAAuB,CAAQ,CAAC;QAC5F,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,gBAAgB,CAAQ,CAAC;QAC9E,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE1B,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7E,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,KAAyB;QAC5C,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;QAEhC,MAAM,QAAQ,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC,SAAS,CAAC;QAClD,MAAM,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAkB,EAAE,EAAE;YACnD,IAAI,KAAK,CAAC,SAAS,EAAE,CAAC;gBACpB,OAAO,CAAC,CAAC,SAAS,KAAK,KAAK,CAAC,SAAS,IAAI,CAAC,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM,CAAC,CAAC;YACzF,CAAC;iBAAM,IAAI,KAAK,CAAC,gBAAgB,IAAI,KAAK,CAAC,uBAAuB,EAAE,CAAC;gBACnE,OAAO,CACL,CAAC,CAAC,gBAAgB,KAAK,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,gBAAgB,CAAC;oBACtE,CAAC,CAAC,uBAAuB,KAAK,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,uBAAuB,CAAC;oBACpF,CAAC,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM,CAAC,CAC7C,CAAC;YACJ,CAAC;iBAAM,CAAC;gBACN,OAAO,SAAS,CAAC;YACnB,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACxC,CAAC;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAC,KAAyB,EAAE,MAAqB;QACxE,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;QAEhC,MAAM,IAAI,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QACpC,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAkB,EAAE,EAAE;YACzD,IAAI,KAAK,CAAC,SAAS,EAAE,CAAC;gBACpB,OAAO,CAAC,CAAC,SAAS,KAAK,KAAK,CAAC,SAAS,CAAC;YACzC,CAAC;iBAAM,IAAI,KAAK,CAAC,gBAAgB,IAAI,KAAK,CAAC,uBAAuB,EAAE,CAAC;gBACnE,OAAO,CACL,CAAC,CAAC,gBAAgB,KAAK,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,gBAAgB,CAAC;oBACtE,CAAC,CAAC,uBAAuB,KAAK,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,uBAAuB,CAAC,CACrF,CAAC;YACJ,CAAC;iBAAM,CAAC;gBACN,OAAO,SAAS,CAAC;YACnB,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACxC,CAAC;QAED,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;QAExB,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7E,CAAC;IAED,KAAK,CAAC,oBAAoB;QACxB,MAAM,IAAI,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QACpC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAkB,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC;QAEvF,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7E,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,UAAsB;QACpC,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QACtC,IAAI,MAAkB,CAAC;QACvB,IAAI,CAAC,UAAU,EAAE,CAAC;YAChB,MAAM,IAAI,GAAG,IAAA,6BAAkB,GAAE,CAAC;YAClC,MAAM,GAAG;gBACP,KAAK,EAAE,IAAI;gBACX,KAAK,EAAE,IAAA,8BAAmB,EAAC,IAAI,CAAC,CAAC,SAAS;aAC3C,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,MAAM,GAAG,UAAU,CAAC;QACtB,CAAC;QACD,MAAM,aAAa,GAAG,IAAA,8BAAmB,EAAC,IAAA,YAAK,EAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QAC/D,MAAM,MAAM,GAAG,IAAA,yBAAkB,EAAC;YAChC,OAAO,EAAE,aAAa;YACtB,KAAK,EAAE,UAAU,CAAC,OAAO;YACzB,SAAS,EAAE,IAAA,WAAI,GAAE;SAClB,CAAC,CAAC;QACH,MAAM,kBAAkB,GAAG,IAAI,4BAAkB,CAC/C,MAAM,EACN,UAAU,CACX,CAAC;QACF,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,GAAG,UAAU,CAAC;QAErE,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;QAC7E,OAAO,kBAAkB,CAAC;IAC5B,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,gBAAwB;QAC3C,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QACtC,MAAM,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC,CAAC;QACtE,IAAI,CAAC,UAAU,EAAE,CAAC;YAChB,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;QACvC,CAAC;QACD,MAAM,OAAO,GAAG,IAAA,8BAAmB,EAAC,UAAU,CAAC,UAAU,CAAC,CAAC;QAC3D,MAAM,MAAM,GAAG,IAAA,yBAAkB,EAAC;YAChC,OAAO;YACP,KAAK,EAAE,gBAAO;YACd,SAAS,EAAE,IAAA,WAAI,GAAE;SAClB,CAAC,CAAC;QACH,MAAM,MAAM,GAAG,IAAI,4BAAkB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QACtD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,KAAK,CAAC,kBAAkB,CAAC,KAAyB;QAChD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QACjD,OAAO,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;IACvD,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,KAA0B;QAChD,MAAM,QAAQ,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC,SAAS,CAAC;QAClD,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;YAC5B,OAAO,QAAQ,CAAC;QAClB,CAAC;QACD,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAkB,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM,CAAC,CAAC;IAC5E,CAAC;IAED,KAAK,CAAC,aAAa;QACjB,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC,UAAU,CAAC;IAC3C,CAAC;IAED,aAAa,CAAC,UAAkB;QAC9B,MAAM,IAAI,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QACpC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAE7B,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QAC3E,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;CACF;AA3KD,kDA2KC","sourcesContent":["import { Hex, createWalletClient, http, toHex } from \"viem\";\nimport { SmartAccountSigner, WalletClientSigner } from \"@alchemy/aa-core\";\nimport { ISessionStorage, SessionLeafNode, SessionSearchParam, SessionStatus } from \"../interfaces/ISessionStorage.js\";\nimport { mainnet } from \"viem/chains\";\nimport { generatePrivateKey, privateKeyToAccount } from \"viem/accounts\";\nimport { SignerData } from \"../utils/Types\";\n\nexport class SessionLocalStorage implements ISessionStorage {\n  private smartAccountAddress: string;\n\n  constructor(smartAccountAddress: string) {\n    this.smartAccountAddress = smartAccountAddress.toLowerCase();\n  }\n\n  private validateSearchParam(param: SessionSearchParam): void {\n    if (param.sessionID) {\n      return;\n    } else if (!param.sessionID && param.sessionPublicKey && param.sessionValidationModule) {\n      return;\n    } else {\n      throw new Error(\"Either pass sessionId or a combination of sessionPublicKey and sessionValidationModule address.\");\n    }\n  }\n\n  private getSessionStore(): any {\n    // @ts-ignore: LocalStorage is not available in node\n    const data = localStorage.getItem(this.getStorageKey(\"sessions\"));\n    return data ? JSON.parse(data) : { merkleRoot: \"\", leafNodes: [] };\n  }\n\n  private getSignerStore(): any {\n    // @ts-ignore: LocalStorage is not available in node\n    const data = localStorage.getItem(this.getStorageKey(\"signers\"));\n    return data ? JSON.parse(data) : {};\n  }\n\n  private getStorageKey(type: \"sessions\" | \"signers\"): string {\n    return `${this.smartAccountAddress}_${type}`;\n  }\n\n  private toLowercaseAddress(address: string): string {\n    return address.toLowerCase();\n  }\n\n  async addSessionData(leaf: SessionLeafNode): Promise<void> {\n    const data = this.getSessionStore();\n    leaf.sessionValidationModule = this.toLowercaseAddress(leaf.sessionValidationModule) as Hex;\n    leaf.sessionPublicKey = this.toLowercaseAddress(leaf.sessionPublicKey) as Hex;\n    data.leafNodes.push(leaf);\n    // @ts-ignore: LocalStorage is not available in node\n    localStorage.setItem(this.getStorageKey(\"sessions\"), JSON.stringify(data));\n  }\n\n  async getSessionData(param: SessionSearchParam): Promise<SessionLeafNode> {\n    this.validateSearchParam(param);\n\n    const sessions = this.getSessionStore().leafNodes;\n    const session = sessions.find((s: SessionLeafNode) => {\n      if (param.sessionID) {\n        return s.sessionID === param.sessionID && (!param.status || s.status === param.status);\n      } else if (param.sessionPublicKey && param.sessionValidationModule) {\n        return (\n          s.sessionPublicKey === this.toLowercaseAddress(param.sessionPublicKey) &&\n          s.sessionValidationModule === this.toLowercaseAddress(param.sessionValidationModule) &&\n          (!param.status || s.status === param.status)\n        );\n      } else {\n        return undefined;\n      }\n    });\n\n    if (!session) {\n      throw new Error(\"Session not found.\");\n    }\n    return session;\n  }\n\n  async updateSessionStatus(param: SessionSearchParam, status: SessionStatus): Promise<void> {\n    this.validateSearchParam(param);\n\n    const data = this.getSessionStore();\n    const session = data.leafNodes.find((s: SessionLeafNode) => {\n      if (param.sessionID) {\n        return s.sessionID === param.sessionID;\n      } else if (param.sessionPublicKey && param.sessionValidationModule) {\n        return (\n          s.sessionPublicKey === this.toLowercaseAddress(param.sessionPublicKey) &&\n          s.sessionValidationModule === this.toLowercaseAddress(param.sessionValidationModule)\n        );\n      } else {\n        return undefined;\n      }\n    });\n\n    if (!session) {\n      throw new Error(\"Session not found.\");\n    }\n\n    session.status = status;\n    // @ts-ignore: LocalStorage is not available in node\n    localStorage.setItem(this.getStorageKey(\"sessions\"), JSON.stringify(data));\n  }\n\n  async clearPendingSessions(): Promise<void> {\n    const data = this.getSessionStore();\n    data.leafNodes = data.leafNodes.filter((s: SessionLeafNode) => s.status !== \"PENDING\");\n    // @ts-ignore: LocalStorage is not available in node\n    localStorage.setItem(this.getStorageKey(\"sessions\"), JSON.stringify(data));\n  }\n\n  async addSigner(signerData: SignerData): Promise<SmartAccountSigner> {\n    const signers = this.getSignerStore();\n    let signer: SignerData;\n    if (!signerData) {\n      const pkey = generatePrivateKey();\n      signer = {\n        pvKey: pkey,\n        pbKey: privateKeyToAccount(pkey).publicKey,\n      };\n    } else {\n      signer = signerData;\n    }\n    const accountSigner = privateKeyToAccount(toHex(signer.pvKey));\n    const client = createWalletClient({\n      account: accountSigner,\n      chain: signerData.chainId,\n      transport: http(),\n    });\n    const walletClientSigner = new WalletClientSigner(\n      client,\n      \"json-rpc\", // signerType\n    );\n    signers[this.toLowercaseAddress(accountSigner.address)] = signerData;\n    // @ts-ignore: LocalStorage is not available in node\n    localStorage.setItem(this.getStorageKey(\"signers\"), JSON.stringify(signers));\n    return walletClientSigner;\n  }\n\n  async getSignerByKey(sessionPublicKey: string): Promise<SmartAccountSigner> {\n    const signers = this.getSignerStore();\n    const signerData = signers[this.toLowercaseAddress(sessionPublicKey)];\n    if (!signerData) {\n      throw new Error(\"Signer not found.\");\n    }\n    const account = privateKeyToAccount(signerData.privateKey);\n    const client = createWalletClient({\n      account,\n      chain: mainnet,\n      transport: http(),\n    });\n    const signer = new WalletClientSigner(client, \"viem\");\n    return signer;\n  }\n\n  async getSignerBySession(param: SessionSearchParam): Promise<SmartAccountSigner> {\n    const session = await this.getSessionData(param);\n    return this.getSignerByKey(session.sessionPublicKey);\n  }\n\n  async getAllSessionData(param?: SessionSearchParam): Promise<SessionLeafNode[]> {\n    const sessions = this.getSessionStore().leafNodes;\n    if (!param || !param.status) {\n      return sessions;\n    }\n    return sessions.filter((s: SessionLeafNode) => s.status === param.status);\n  }\n\n  async getMerkleRoot(): Promise<string> {\n    return this.getSessionStore().merkleRoot;\n  }\n\n  setMerkleRoot(merkleRoot: string): Promise<void> {\n    const data = this.getSessionStore();\n    data.merkleRoot = merkleRoot;\n    // @ts-ignore: LocalStorage is not available in node\n    localStorage.setItem(this.getStorageKey(\"sessions\"), JSON.stringify(data));\n    return Promise.resolve();\n  }\n}\n"]}
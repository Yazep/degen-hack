{"version":3,"file":"MultiChainValidationModule_v100.js","sourceRoot":"","sources":["../../../../src/typechain/biconomy_v2.0.0/MultiChainValidationModule_v100.ts"],"names":[],"mappings":"","sourcesContent":["/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport type {\n  BaseContract,\n  BigNumber,\n  BigNumberish,\n  BytesLike,\n  CallOverrides,\n  ContractTransaction,\n  Overrides,\n  PopulatedTransaction,\n  Signer,\n  utils,\n} from \"ethers\";\nimport type {\n  FunctionFragment,\n  Result,\n  EventFragment,\n} from \"@ethersproject/abi\";\nimport type { Listener, Provider } from \"@ethersproject/providers\";\nimport type {\n  TypedEventFilter,\n  TypedEvent,\n  TypedListener,\n  OnEvent,\n  PromiseOrValue,\n} from \"../common\";\n\nexport type UserOperationStruct = {\n  sender: PromiseOrValue<string>;\n  nonce: PromiseOrValue<BigNumberish>;\n  initCode: PromiseOrValue<BytesLike>;\n  callData: PromiseOrValue<BytesLike>;\n  callGasLimit: PromiseOrValue<BigNumberish>;\n  verificationGasLimit: PromiseOrValue<BigNumberish>;\n  preVerificationGas: PromiseOrValue<BigNumberish>;\n  maxFeePerGas: PromiseOrValue<BigNumberish>;\n  maxPriorityFeePerGas: PromiseOrValue<BigNumberish>;\n  paymasterAndData: PromiseOrValue<BytesLike>;\n  signature: PromiseOrValue<BytesLike>;\n};\n\nexport type UserOperationStructOutput = [\n  string,\n  BigNumber,\n  string,\n  string,\n  BigNumber,\n  BigNumber,\n  BigNumber,\n  BigNumber,\n  BigNumber,\n  string,\n  string\n] & {\n  sender: string;\n  nonce: BigNumber;\n  initCode: string;\n  callData: string;\n  callGasLimit: BigNumber;\n  verificationGasLimit: BigNumber;\n  preVerificationGas: BigNumber;\n  maxFeePerGas: BigNumber;\n  maxPriorityFeePerGas: BigNumber;\n  paymasterAndData: string;\n  signature: string;\n};\n\nexport interface MultiChainValidationModule_v100Interface\n  extends utils.Interface {\n  functions: {\n    \"NAME()\": FunctionFragment;\n    \"VERSION()\": FunctionFragment;\n    \"getOwner(address)\": FunctionFragment;\n    \"initForSmartAccount(address)\": FunctionFragment;\n    \"isValidSignature(bytes32,bytes)\": FunctionFragment;\n    \"isValidSignatureForAddress(bytes32,bytes,address)\": FunctionFragment;\n    \"renounceOwnership()\": FunctionFragment;\n    \"transferOwnership(address)\": FunctionFragment;\n    \"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32)\": FunctionFragment;\n  };\n\n  getFunction(\n    nameOrSignatureOrTopic:\n      | \"NAME\"\n      | \"VERSION\"\n      | \"getOwner\"\n      | \"initForSmartAccount\"\n      | \"isValidSignature\"\n      | \"isValidSignatureForAddress\"\n      | \"renounceOwnership\"\n      | \"transferOwnership\"\n      | \"validateUserOp\"\n  ): FunctionFragment;\n\n  encodeFunctionData(functionFragment: \"NAME\", values?: undefined): string;\n  encodeFunctionData(functionFragment: \"VERSION\", values?: undefined): string;\n  encodeFunctionData(\n    functionFragment: \"getOwner\",\n    values: [PromiseOrValue<string>]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"initForSmartAccount\",\n    values: [PromiseOrValue<string>]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"isValidSignature\",\n    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"isValidSignatureForAddress\",\n    values: [\n      PromiseOrValue<BytesLike>,\n      PromiseOrValue<BytesLike>,\n      PromiseOrValue<string>\n    ]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"renounceOwnership\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"transferOwnership\",\n    values: [PromiseOrValue<string>]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"validateUserOp\",\n    values: [UserOperationStruct, PromiseOrValue<BytesLike>]\n  ): string;\n\n  decodeFunctionResult(functionFragment: \"NAME\", data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: \"VERSION\", data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: \"getOwner\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"initForSmartAccount\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"isValidSignature\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"isValidSignatureForAddress\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"renounceOwnership\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"transferOwnership\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"validateUserOp\",\n    data: BytesLike\n  ): Result;\n\n  events: {\n    \"OwnershipTransferred(address,address,address)\": EventFragment;\n  };\n\n  getEvent(nameOrSignatureOrTopic: \"OwnershipTransferred\"): EventFragment;\n}\n\nexport interface OwnershipTransferredEventObject {\n  smartAccount: string;\n  oldOwner: string;\n  newOwner: string;\n}\nexport type OwnershipTransferredEvent = TypedEvent<\n  [string, string, string],\n  OwnershipTransferredEventObject\n>;\n\nexport type OwnershipTransferredEventFilter =\n  TypedEventFilter<OwnershipTransferredEvent>;\n\nexport interface MultiChainValidationModule_v100 extends BaseContract {\n  connect(signerOrProvider: Signer | Provider | string): this;\n  attach(addressOrName: string): this;\n  deployed(): Promise<this>;\n\n  interface: MultiChainValidationModule_v100Interface;\n\n  queryFilter<TEvent extends TypedEvent>(\n    event: TypedEventFilter<TEvent>,\n    fromBlockOrBlockhash?: string | number | undefined,\n    toBlock?: string | number | undefined\n  ): Promise<Array<TEvent>>;\n\n  listeners<TEvent extends TypedEvent>(\n    eventFilter?: TypedEventFilter<TEvent>\n  ): Array<TypedListener<TEvent>>;\n  listeners(eventName?: string): Array<Listener>;\n  removeAllListeners<TEvent extends TypedEvent>(\n    eventFilter: TypedEventFilter<TEvent>\n  ): this;\n  removeAllListeners(eventName?: string): this;\n  off: OnEvent<this>;\n  on: OnEvent<this>;\n  once: OnEvent<this>;\n  removeListener: OnEvent<this>;\n\n  functions: {\n    NAME(overrides?: CallOverrides): Promise<[string]>;\n\n    VERSION(overrides?: CallOverrides): Promise<[string]>;\n\n    getOwner(\n      smartAccount: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<[string]>;\n\n    initForSmartAccount(\n      eoaOwner: PromiseOrValue<string>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<ContractTransaction>;\n\n    isValidSignature(\n      dataHash: PromiseOrValue<BytesLike>,\n      moduleSignature: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<[string]>;\n\n    isValidSignatureForAddress(\n      dataHash: PromiseOrValue<BytesLike>,\n      moduleSignature: PromiseOrValue<BytesLike>,\n      smartAccount: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<[string]>;\n\n    renounceOwnership(\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<ContractTransaction>;\n\n    transferOwnership(\n      owner: PromiseOrValue<string>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<ContractTransaction>;\n\n    validateUserOp(\n      userOp: UserOperationStruct,\n      userOpHash: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<[BigNumber]>;\n  };\n\n  NAME(overrides?: CallOverrides): Promise<string>;\n\n  VERSION(overrides?: CallOverrides): Promise<string>;\n\n  getOwner(\n    smartAccount: PromiseOrValue<string>,\n    overrides?: CallOverrides\n  ): Promise<string>;\n\n  initForSmartAccount(\n    eoaOwner: PromiseOrValue<string>,\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<ContractTransaction>;\n\n  isValidSignature(\n    dataHash: PromiseOrValue<BytesLike>,\n    moduleSignature: PromiseOrValue<BytesLike>,\n    overrides?: CallOverrides\n  ): Promise<string>;\n\n  isValidSignatureForAddress(\n    dataHash: PromiseOrValue<BytesLike>,\n    moduleSignature: PromiseOrValue<BytesLike>,\n    smartAccount: PromiseOrValue<string>,\n    overrides?: CallOverrides\n  ): Promise<string>;\n\n  renounceOwnership(\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<ContractTransaction>;\n\n  transferOwnership(\n    owner: PromiseOrValue<string>,\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<ContractTransaction>;\n\n  validateUserOp(\n    userOp: UserOperationStruct,\n    userOpHash: PromiseOrValue<BytesLike>,\n    overrides?: CallOverrides\n  ): Promise<BigNumber>;\n\n  callStatic: {\n    NAME(overrides?: CallOverrides): Promise<string>;\n\n    VERSION(overrides?: CallOverrides): Promise<string>;\n\n    getOwner(\n      smartAccount: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<string>;\n\n    initForSmartAccount(\n      eoaOwner: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<string>;\n\n    isValidSignature(\n      dataHash: PromiseOrValue<BytesLike>,\n      moduleSignature: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<string>;\n\n    isValidSignatureForAddress(\n      dataHash: PromiseOrValue<BytesLike>,\n      moduleSignature: PromiseOrValue<BytesLike>,\n      smartAccount: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<string>;\n\n    renounceOwnership(overrides?: CallOverrides): Promise<void>;\n\n    transferOwnership(\n      owner: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    validateUserOp(\n      userOp: UserOperationStruct,\n      userOpHash: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n  };\n\n  filters: {\n    \"OwnershipTransferred(address,address,address)\"(\n      smartAccount?: PromiseOrValue<string> | null,\n      oldOwner?: PromiseOrValue<string> | null,\n      newOwner?: PromiseOrValue<string> | null\n    ): OwnershipTransferredEventFilter;\n    OwnershipTransferred(\n      smartAccount?: PromiseOrValue<string> | null,\n      oldOwner?: PromiseOrValue<string> | null,\n      newOwner?: PromiseOrValue<string> | null\n    ): OwnershipTransferredEventFilter;\n  };\n\n  estimateGas: {\n    NAME(overrides?: CallOverrides): Promise<BigNumber>;\n\n    VERSION(overrides?: CallOverrides): Promise<BigNumber>;\n\n    getOwner(\n      smartAccount: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    initForSmartAccount(\n      eoaOwner: PromiseOrValue<string>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<BigNumber>;\n\n    isValidSignature(\n      dataHash: PromiseOrValue<BytesLike>,\n      moduleSignature: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    isValidSignatureForAddress(\n      dataHash: PromiseOrValue<BytesLike>,\n      moduleSignature: PromiseOrValue<BytesLike>,\n      smartAccount: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    renounceOwnership(\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<BigNumber>;\n\n    transferOwnership(\n      owner: PromiseOrValue<string>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<BigNumber>;\n\n    validateUserOp(\n      userOp: UserOperationStruct,\n      userOpHash: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n  };\n\n  populateTransaction: {\n    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    getOwner(\n      smartAccount: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    initForSmartAccount(\n      eoaOwner: PromiseOrValue<string>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<PopulatedTransaction>;\n\n    isValidSignature(\n      dataHash: PromiseOrValue<BytesLike>,\n      moduleSignature: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    isValidSignatureForAddress(\n      dataHash: PromiseOrValue<BytesLike>,\n      moduleSignature: PromiseOrValue<BytesLike>,\n      smartAccount: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    renounceOwnership(\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<PopulatedTransaction>;\n\n    transferOwnership(\n      owner: PromiseOrValue<string>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<PopulatedTransaction>;\n\n    validateUserOp(\n      userOp: UserOperationStruct,\n      userOpHash: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n  };\n}\n"]}
{"version":3,"file":"EntryPoint_v005.js","sourceRoot":"","sources":["../../../../src/typechain/entrypoint/EntryPoint_v005.ts"],"names":[],"mappings":"","sourcesContent":["/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport type {\n  BaseContract,\n  BigNumber,\n  BigNumberish,\n  BytesLike,\n  CallOverrides,\n  ContractTransaction,\n  Overrides,\n  PayableOverrides,\n  PopulatedTransaction,\n  Signer,\n  utils,\n} from \"ethers\";\nimport type {\n  FunctionFragment,\n  Result,\n  EventFragment,\n} from \"@ethersproject/abi\";\nimport type { Listener, Provider } from \"@ethersproject/providers\";\nimport type {\n  TypedEventFilter,\n  TypedEvent,\n  TypedListener,\n  OnEvent,\n  PromiseOrValue,\n} from \"../common\";\n\nexport type UserOperationStruct = {\n  sender: PromiseOrValue<string>;\n  nonce: PromiseOrValue<BigNumberish>;\n  initCode: PromiseOrValue<BytesLike>;\n  callData: PromiseOrValue<BytesLike>;\n  callGasLimit: PromiseOrValue<BigNumberish>;\n  verificationGasLimit: PromiseOrValue<BigNumberish>;\n  preVerificationGas: PromiseOrValue<BigNumberish>;\n  maxFeePerGas: PromiseOrValue<BigNumberish>;\n  maxPriorityFeePerGas: PromiseOrValue<BigNumberish>;\n  paymasterAndData: PromiseOrValue<BytesLike>;\n  signature: PromiseOrValue<BytesLike>;\n};\n\nexport type UserOperationStructOutput = [\n  string,\n  BigNumber,\n  string,\n  string,\n  BigNumber,\n  BigNumber,\n  BigNumber,\n  BigNumber,\n  BigNumber,\n  string,\n  string\n] & {\n  sender: string;\n  nonce: BigNumber;\n  initCode: string;\n  callData: string;\n  callGasLimit: BigNumber;\n  verificationGasLimit: BigNumber;\n  preVerificationGas: BigNumber;\n  maxFeePerGas: BigNumber;\n  maxPriorityFeePerGas: BigNumber;\n  paymasterAndData: string;\n  signature: string;\n};\n\nexport declare namespace IStakeManager {\n  export type DepositInfoStruct = {\n    deposit: PromiseOrValue<BigNumberish>;\n    staked: PromiseOrValue<boolean>;\n    stake: PromiseOrValue<BigNumberish>;\n    unstakeDelaySec: PromiseOrValue<BigNumberish>;\n    withdrawTime: PromiseOrValue<BigNumberish>;\n  };\n\n  export type DepositInfoStructOutput = [\n    BigNumber,\n    boolean,\n    BigNumber,\n    number,\n    number\n  ] & {\n    deposit: BigNumber;\n    staked: boolean;\n    stake: BigNumber;\n    unstakeDelaySec: number;\n    withdrawTime: number;\n  };\n}\n\nexport declare namespace IEntryPoint {\n  export type UserOpsPerAggregatorStruct = {\n    userOps: UserOperationStruct[];\n    aggregator: PromiseOrValue<string>;\n    signature: PromiseOrValue<BytesLike>;\n  };\n\n  export type UserOpsPerAggregatorStructOutput = [\n    UserOperationStructOutput[],\n    string,\n    string\n  ] & {\n    userOps: UserOperationStructOutput[];\n    aggregator: string;\n    signature: string;\n  };\n}\n\nexport declare namespace EntryPoint {\n  export type MemoryUserOpStruct = {\n    sender: PromiseOrValue<string>;\n    nonce: PromiseOrValue<BigNumberish>;\n    callGasLimit: PromiseOrValue<BigNumberish>;\n    verificationGasLimit: PromiseOrValue<BigNumberish>;\n    preVerificationGas: PromiseOrValue<BigNumberish>;\n    paymaster: PromiseOrValue<string>;\n    maxFeePerGas: PromiseOrValue<BigNumberish>;\n    maxPriorityFeePerGas: PromiseOrValue<BigNumberish>;\n  };\n\n  export type MemoryUserOpStructOutput = [\n    string,\n    BigNumber,\n    BigNumber,\n    BigNumber,\n    BigNumber,\n    string,\n    BigNumber,\n    BigNumber\n  ] & {\n    sender: string;\n    nonce: BigNumber;\n    callGasLimit: BigNumber;\n    verificationGasLimit: BigNumber;\n    preVerificationGas: BigNumber;\n    paymaster: string;\n    maxFeePerGas: BigNumber;\n    maxPriorityFeePerGas: BigNumber;\n  };\n\n  export type UserOpInfoStruct = {\n    mUserOp: EntryPoint.MemoryUserOpStruct;\n    userOpHash: PromiseOrValue<BytesLike>;\n    prefund: PromiseOrValue<BigNumberish>;\n    contextOffset: PromiseOrValue<BigNumberish>;\n    preOpGas: PromiseOrValue<BigNumberish>;\n  };\n\n  export type UserOpInfoStructOutput = [\n    EntryPoint.MemoryUserOpStructOutput,\n    string,\n    BigNumber,\n    BigNumber,\n    BigNumber\n  ] & {\n    mUserOp: EntryPoint.MemoryUserOpStructOutput;\n    userOpHash: string;\n    prefund: BigNumber;\n    contextOffset: BigNumber;\n    preOpGas: BigNumber;\n  };\n}\n\nexport interface EntryPoint_v005Interface extends utils.Interface {\n  functions: {\n    \"SIG_VALIDATION_FAILED()\": FunctionFragment;\n    \"_validateSenderAndPaymaster(bytes,address,bytes)\": FunctionFragment;\n    \"addStake(uint32)\": FunctionFragment;\n    \"balanceOf(address)\": FunctionFragment;\n    \"depositTo(address)\": FunctionFragment;\n    \"deposits(address)\": FunctionFragment;\n    \"getDepositInfo(address)\": FunctionFragment;\n    \"getNonce(address,uint192)\": FunctionFragment;\n    \"getSenderAddress(bytes)\": FunctionFragment;\n    \"getUserOpHash((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\": FunctionFragment;\n    \"handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)\": FunctionFragment;\n    \"handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)\": FunctionFragment;\n    \"incrementNonce(uint192)\": FunctionFragment;\n    \"innerHandleOp(bytes,((address,uint256,uint256,uint256,uint256,address,uint256,uint256),bytes32,uint256,uint256,uint256),bytes)\": FunctionFragment;\n    \"nonceSequenceNumber(address,uint192)\": FunctionFragment;\n    \"simulateHandleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),address,bytes)\": FunctionFragment;\n    \"simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\": FunctionFragment;\n    \"unlockStake()\": FunctionFragment;\n    \"withdrawStake(address)\": FunctionFragment;\n    \"withdrawTo(address,uint256)\": FunctionFragment;\n  };\n\n  getFunction(\n    nameOrSignatureOrTopic:\n      | \"SIG_VALIDATION_FAILED\"\n      | \"_validateSenderAndPaymaster\"\n      | \"addStake\"\n      | \"balanceOf\"\n      | \"depositTo\"\n      | \"deposits\"\n      | \"getDepositInfo\"\n      | \"getNonce\"\n      | \"getSenderAddress\"\n      | \"getUserOpHash\"\n      | \"handleAggregatedOps\"\n      | \"handleOps\"\n      | \"incrementNonce\"\n      | \"innerHandleOp\"\n      | \"nonceSequenceNumber\"\n      | \"simulateHandleOp\"\n      | \"simulateValidation\"\n      | \"unlockStake\"\n      | \"withdrawStake\"\n      | \"withdrawTo\"\n  ): FunctionFragment;\n\n  encodeFunctionData(\n    functionFragment: \"SIG_VALIDATION_FAILED\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"_validateSenderAndPaymaster\",\n    values: [\n      PromiseOrValue<BytesLike>,\n      PromiseOrValue<string>,\n      PromiseOrValue<BytesLike>\n    ]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"addStake\",\n    values: [PromiseOrValue<BigNumberish>]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"balanceOf\",\n    values: [PromiseOrValue<string>]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"depositTo\",\n    values: [PromiseOrValue<string>]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"deposits\",\n    values: [PromiseOrValue<string>]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"getDepositInfo\",\n    values: [PromiseOrValue<string>]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"getNonce\",\n    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"getSenderAddress\",\n    values: [PromiseOrValue<BytesLike>]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"getUserOpHash\",\n    values: [UserOperationStruct]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"handleAggregatedOps\",\n    values: [IEntryPoint.UserOpsPerAggregatorStruct[], PromiseOrValue<string>]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"handleOps\",\n    values: [UserOperationStruct[], PromiseOrValue<string>]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"incrementNonce\",\n    values: [PromiseOrValue<BigNumberish>]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"innerHandleOp\",\n    values: [\n      PromiseOrValue<BytesLike>,\n      EntryPoint.UserOpInfoStruct,\n      PromiseOrValue<BytesLike>\n    ]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"nonceSequenceNumber\",\n    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"simulateHandleOp\",\n    values: [\n      UserOperationStruct,\n      PromiseOrValue<string>,\n      PromiseOrValue<BytesLike>\n    ]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"simulateValidation\",\n    values: [UserOperationStruct]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"unlockStake\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"withdrawStake\",\n    values: [PromiseOrValue<string>]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"withdrawTo\",\n    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]\n  ): string;\n\n  decodeFunctionResult(\n    functionFragment: \"SIG_VALIDATION_FAILED\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"_validateSenderAndPaymaster\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: \"addStake\", data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: \"balanceOf\", data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: \"depositTo\", data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: \"deposits\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"getDepositInfo\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: \"getNonce\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"getSenderAddress\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"getUserOpHash\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"handleAggregatedOps\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: \"handleOps\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"incrementNonce\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"innerHandleOp\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"nonceSequenceNumber\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"simulateHandleOp\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"simulateValidation\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"unlockStake\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"withdrawStake\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: \"withdrawTo\", data: BytesLike): Result;\n\n  events: {\n    \"AccountDeployed(bytes32,address,address,address)\": EventFragment;\n    \"BeforeExecution()\": EventFragment;\n    \"Deposited(address,uint256)\": EventFragment;\n    \"SignatureAggregatorChanged(address)\": EventFragment;\n    \"StakeLocked(address,uint256,uint256)\": EventFragment;\n    \"StakeUnlocked(address,uint256)\": EventFragment;\n    \"StakeWithdrawn(address,address,uint256)\": EventFragment;\n    \"UserOperationEvent(bytes32,address,address,uint256,bool,uint256,uint256)\": EventFragment;\n    \"UserOperationRevertReason(bytes32,address,uint256,bytes)\": EventFragment;\n    \"Withdrawn(address,address,uint256)\": EventFragment;\n  };\n\n  getEvent(nameOrSignatureOrTopic: \"AccountDeployed\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"BeforeExecution\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"Deposited\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"SignatureAggregatorChanged\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"StakeLocked\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"StakeUnlocked\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"StakeWithdrawn\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"UserOperationEvent\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"UserOperationRevertReason\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"Withdrawn\"): EventFragment;\n}\n\nexport interface AccountDeployedEventObject {\n  userOpHash: string;\n  sender: string;\n  factory: string;\n  paymaster: string;\n}\nexport type AccountDeployedEvent = TypedEvent<\n  [string, string, string, string],\n  AccountDeployedEventObject\n>;\n\nexport type AccountDeployedEventFilter = TypedEventFilter<AccountDeployedEvent>;\n\nexport interface BeforeExecutionEventObject {}\nexport type BeforeExecutionEvent = TypedEvent<[], BeforeExecutionEventObject>;\n\nexport type BeforeExecutionEventFilter = TypedEventFilter<BeforeExecutionEvent>;\n\nexport interface DepositedEventObject {\n  account: string;\n  totalDeposit: BigNumber;\n}\nexport type DepositedEvent = TypedEvent<\n  [string, BigNumber],\n  DepositedEventObject\n>;\n\nexport type DepositedEventFilter = TypedEventFilter<DepositedEvent>;\n\nexport interface SignatureAggregatorChangedEventObject {\n  aggregator: string;\n}\nexport type SignatureAggregatorChangedEvent = TypedEvent<\n  [string],\n  SignatureAggregatorChangedEventObject\n>;\n\nexport type SignatureAggregatorChangedEventFilter =\n  TypedEventFilter<SignatureAggregatorChangedEvent>;\n\nexport interface StakeLockedEventObject {\n  account: string;\n  totalStaked: BigNumber;\n  unstakeDelaySec: BigNumber;\n}\nexport type StakeLockedEvent = TypedEvent<\n  [string, BigNumber, BigNumber],\n  StakeLockedEventObject\n>;\n\nexport type StakeLockedEventFilter = TypedEventFilter<StakeLockedEvent>;\n\nexport interface StakeUnlockedEventObject {\n  account: string;\n  withdrawTime: BigNumber;\n}\nexport type StakeUnlockedEvent = TypedEvent<\n  [string, BigNumber],\n  StakeUnlockedEventObject\n>;\n\nexport type StakeUnlockedEventFilter = TypedEventFilter<StakeUnlockedEvent>;\n\nexport interface StakeWithdrawnEventObject {\n  account: string;\n  withdrawAddress: string;\n  amount: BigNumber;\n}\nexport type StakeWithdrawnEvent = TypedEvent<\n  [string, string, BigNumber],\n  StakeWithdrawnEventObject\n>;\n\nexport type StakeWithdrawnEventFilter = TypedEventFilter<StakeWithdrawnEvent>;\n\nexport interface UserOperationEventEventObject {\n  userOpHash: string;\n  sender: string;\n  paymaster: string;\n  nonce: BigNumber;\n  success: boolean;\n  actualGasCost: BigNumber;\n  actualGasUsed: BigNumber;\n}\nexport type UserOperationEventEvent = TypedEvent<\n  [string, string, string, BigNumber, boolean, BigNumber, BigNumber],\n  UserOperationEventEventObject\n>;\n\nexport type UserOperationEventEventFilter =\n  TypedEventFilter<UserOperationEventEvent>;\n\nexport interface UserOperationRevertReasonEventObject {\n  userOpHash: string;\n  sender: string;\n  nonce: BigNumber;\n  revertReason: string;\n}\nexport type UserOperationRevertReasonEvent = TypedEvent<\n  [string, string, BigNumber, string],\n  UserOperationRevertReasonEventObject\n>;\n\nexport type UserOperationRevertReasonEventFilter =\n  TypedEventFilter<UserOperationRevertReasonEvent>;\n\nexport interface WithdrawnEventObject {\n  account: string;\n  withdrawAddress: string;\n  amount: BigNumber;\n}\nexport type WithdrawnEvent = TypedEvent<\n  [string, string, BigNumber],\n  WithdrawnEventObject\n>;\n\nexport type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;\n\nexport interface EntryPoint_v005 extends BaseContract {\n  connect(signerOrProvider: Signer | Provider | string): this;\n  attach(addressOrName: string): this;\n  deployed(): Promise<this>;\n\n  interface: EntryPoint_v005Interface;\n\n  queryFilter<TEvent extends TypedEvent>(\n    event: TypedEventFilter<TEvent>,\n    fromBlockOrBlockhash?: string | number | undefined,\n    toBlock?: string | number | undefined\n  ): Promise<Array<TEvent>>;\n\n  listeners<TEvent extends TypedEvent>(\n    eventFilter?: TypedEventFilter<TEvent>\n  ): Array<TypedListener<TEvent>>;\n  listeners(eventName?: string): Array<Listener>;\n  removeAllListeners<TEvent extends TypedEvent>(\n    eventFilter: TypedEventFilter<TEvent>\n  ): this;\n  removeAllListeners(eventName?: string): this;\n  off: OnEvent<this>;\n  on: OnEvent<this>;\n  once: OnEvent<this>;\n  removeListener: OnEvent<this>;\n\n  functions: {\n    SIG_VALIDATION_FAILED(overrides?: CallOverrides): Promise<[BigNumber]>;\n\n    _validateSenderAndPaymaster(\n      initCode: PromiseOrValue<BytesLike>,\n      sender: PromiseOrValue<string>,\n      paymasterAndData: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<[void]>;\n\n    addStake(\n      unstakeDelaySec: PromiseOrValue<BigNumberish>,\n      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }\n    ): Promise<ContractTransaction>;\n\n    balanceOf(\n      account: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<[BigNumber]>;\n\n    depositTo(\n      account: PromiseOrValue<string>,\n      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }\n    ): Promise<ContractTransaction>;\n\n    deposits(\n      arg0: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<\n      [BigNumber, boolean, BigNumber, number, number] & {\n        deposit: BigNumber;\n        staked: boolean;\n        stake: BigNumber;\n        unstakeDelaySec: number;\n        withdrawTime: number;\n      }\n    >;\n\n    getDepositInfo(\n      account: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<\n      [IStakeManager.DepositInfoStructOutput] & {\n        info: IStakeManager.DepositInfoStructOutput;\n      }\n    >;\n\n    getNonce(\n      sender: PromiseOrValue<string>,\n      key: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<[BigNumber] & { nonce: BigNumber }>;\n\n    getSenderAddress(\n      initCode: PromiseOrValue<BytesLike>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<ContractTransaction>;\n\n    getUserOpHash(\n      userOp: UserOperationStruct,\n      overrides?: CallOverrides\n    ): Promise<[string]>;\n\n    handleAggregatedOps(\n      opsPerAggregator: IEntryPoint.UserOpsPerAggregatorStruct[],\n      beneficiary: PromiseOrValue<string>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<ContractTransaction>;\n\n    handleOps(\n      ops: UserOperationStruct[],\n      beneficiary: PromiseOrValue<string>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<ContractTransaction>;\n\n    incrementNonce(\n      key: PromiseOrValue<BigNumberish>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<ContractTransaction>;\n\n    innerHandleOp(\n      callData: PromiseOrValue<BytesLike>,\n      opInfo: EntryPoint.UserOpInfoStruct,\n      context: PromiseOrValue<BytesLike>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<ContractTransaction>;\n\n    nonceSequenceNumber(\n      arg0: PromiseOrValue<string>,\n      arg1: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<[BigNumber]>;\n\n    simulateHandleOp(\n      op: UserOperationStruct,\n      target: PromiseOrValue<string>,\n      targetCallData: PromiseOrValue<BytesLike>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<ContractTransaction>;\n\n    simulateValidation(\n      userOp: UserOperationStruct,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<ContractTransaction>;\n\n    unlockStake(\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<ContractTransaction>;\n\n    withdrawStake(\n      withdrawAddress: PromiseOrValue<string>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<ContractTransaction>;\n\n    withdrawTo(\n      withdrawAddress: PromiseOrValue<string>,\n      withdrawAmount: PromiseOrValue<BigNumberish>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<ContractTransaction>;\n  };\n\n  SIG_VALIDATION_FAILED(overrides?: CallOverrides): Promise<BigNumber>;\n\n  _validateSenderAndPaymaster(\n    initCode: PromiseOrValue<BytesLike>,\n    sender: PromiseOrValue<string>,\n    paymasterAndData: PromiseOrValue<BytesLike>,\n    overrides?: CallOverrides\n  ): Promise<void>;\n\n  addStake(\n    unstakeDelaySec: PromiseOrValue<BigNumberish>,\n    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }\n  ): Promise<ContractTransaction>;\n\n  balanceOf(\n    account: PromiseOrValue<string>,\n    overrides?: CallOverrides\n  ): Promise<BigNumber>;\n\n  depositTo(\n    account: PromiseOrValue<string>,\n    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }\n  ): Promise<ContractTransaction>;\n\n  deposits(\n    arg0: PromiseOrValue<string>,\n    overrides?: CallOverrides\n  ): Promise<\n    [BigNumber, boolean, BigNumber, number, number] & {\n      deposit: BigNumber;\n      staked: boolean;\n      stake: BigNumber;\n      unstakeDelaySec: number;\n      withdrawTime: number;\n    }\n  >;\n\n  getDepositInfo(\n    account: PromiseOrValue<string>,\n    overrides?: CallOverrides\n  ): Promise<IStakeManager.DepositInfoStructOutput>;\n\n  getNonce(\n    sender: PromiseOrValue<string>,\n    key: PromiseOrValue<BigNumberish>,\n    overrides?: CallOverrides\n  ): Promise<BigNumber>;\n\n  getSenderAddress(\n    initCode: PromiseOrValue<BytesLike>,\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<ContractTransaction>;\n\n  getUserOpHash(\n    userOp: UserOperationStruct,\n    overrides?: CallOverrides\n  ): Promise<string>;\n\n  handleAggregatedOps(\n    opsPerAggregator: IEntryPoint.UserOpsPerAggregatorStruct[],\n    beneficiary: PromiseOrValue<string>,\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<ContractTransaction>;\n\n  handleOps(\n    ops: UserOperationStruct[],\n    beneficiary: PromiseOrValue<string>,\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<ContractTransaction>;\n\n  incrementNonce(\n    key: PromiseOrValue<BigNumberish>,\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<ContractTransaction>;\n\n  innerHandleOp(\n    callData: PromiseOrValue<BytesLike>,\n    opInfo: EntryPoint.UserOpInfoStruct,\n    context: PromiseOrValue<BytesLike>,\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<ContractTransaction>;\n\n  nonceSequenceNumber(\n    arg0: PromiseOrValue<string>,\n    arg1: PromiseOrValue<BigNumberish>,\n    overrides?: CallOverrides\n  ): Promise<BigNumber>;\n\n  simulateHandleOp(\n    op: UserOperationStruct,\n    target: PromiseOrValue<string>,\n    targetCallData: PromiseOrValue<BytesLike>,\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<ContractTransaction>;\n\n  simulateValidation(\n    userOp: UserOperationStruct,\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<ContractTransaction>;\n\n  unlockStake(\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<ContractTransaction>;\n\n  withdrawStake(\n    withdrawAddress: PromiseOrValue<string>,\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<ContractTransaction>;\n\n  withdrawTo(\n    withdrawAddress: PromiseOrValue<string>,\n    withdrawAmount: PromiseOrValue<BigNumberish>,\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<ContractTransaction>;\n\n  callStatic: {\n    SIG_VALIDATION_FAILED(overrides?: CallOverrides): Promise<BigNumber>;\n\n    _validateSenderAndPaymaster(\n      initCode: PromiseOrValue<BytesLike>,\n      sender: PromiseOrValue<string>,\n      paymasterAndData: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    addStake(\n      unstakeDelaySec: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    balanceOf(\n      account: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    depositTo(\n      account: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    deposits(\n      arg0: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<\n      [BigNumber, boolean, BigNumber, number, number] & {\n        deposit: BigNumber;\n        staked: boolean;\n        stake: BigNumber;\n        unstakeDelaySec: number;\n        withdrawTime: number;\n      }\n    >;\n\n    getDepositInfo(\n      account: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<IStakeManager.DepositInfoStructOutput>;\n\n    getNonce(\n      sender: PromiseOrValue<string>,\n      key: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    getSenderAddress(\n      initCode: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    getUserOpHash(\n      userOp: UserOperationStruct,\n      overrides?: CallOverrides\n    ): Promise<string>;\n\n    handleAggregatedOps(\n      opsPerAggregator: IEntryPoint.UserOpsPerAggregatorStruct[],\n      beneficiary: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    handleOps(\n      ops: UserOperationStruct[],\n      beneficiary: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    incrementNonce(\n      key: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    innerHandleOp(\n      callData: PromiseOrValue<BytesLike>,\n      opInfo: EntryPoint.UserOpInfoStruct,\n      context: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    nonceSequenceNumber(\n      arg0: PromiseOrValue<string>,\n      arg1: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    simulateHandleOp(\n      op: UserOperationStruct,\n      target: PromiseOrValue<string>,\n      targetCallData: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    simulateValidation(\n      userOp: UserOperationStruct,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    unlockStake(overrides?: CallOverrides): Promise<void>;\n\n    withdrawStake(\n      withdrawAddress: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    withdrawTo(\n      withdrawAddress: PromiseOrValue<string>,\n      withdrawAmount: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<void>;\n  };\n\n  filters: {\n    \"AccountDeployed(bytes32,address,address,address)\"(\n      userOpHash?: PromiseOrValue<BytesLike> | null,\n      sender?: PromiseOrValue<string> | null,\n      factory?: null,\n      paymaster?: null\n    ): AccountDeployedEventFilter;\n    AccountDeployed(\n      userOpHash?: PromiseOrValue<BytesLike> | null,\n      sender?: PromiseOrValue<string> | null,\n      factory?: null,\n      paymaster?: null\n    ): AccountDeployedEventFilter;\n\n    \"BeforeExecution()\"(): BeforeExecutionEventFilter;\n    BeforeExecution(): BeforeExecutionEventFilter;\n\n    \"Deposited(address,uint256)\"(\n      account?: PromiseOrValue<string> | null,\n      totalDeposit?: null\n    ): DepositedEventFilter;\n    Deposited(\n      account?: PromiseOrValue<string> | null,\n      totalDeposit?: null\n    ): DepositedEventFilter;\n\n    \"SignatureAggregatorChanged(address)\"(\n      aggregator?: PromiseOrValue<string> | null\n    ): SignatureAggregatorChangedEventFilter;\n    SignatureAggregatorChanged(\n      aggregator?: PromiseOrValue<string> | null\n    ): SignatureAggregatorChangedEventFilter;\n\n    \"StakeLocked(address,uint256,uint256)\"(\n      account?: PromiseOrValue<string> | null,\n      totalStaked?: null,\n      unstakeDelaySec?: null\n    ): StakeLockedEventFilter;\n    StakeLocked(\n      account?: PromiseOrValue<string> | null,\n      totalStaked?: null,\n      unstakeDelaySec?: null\n    ): StakeLockedEventFilter;\n\n    \"StakeUnlocked(address,uint256)\"(\n      account?: PromiseOrValue<string> | null,\n      withdrawTime?: null\n    ): StakeUnlockedEventFilter;\n    StakeUnlocked(\n      account?: PromiseOrValue<string> | null,\n      withdrawTime?: null\n    ): StakeUnlockedEventFilter;\n\n    \"StakeWithdrawn(address,address,uint256)\"(\n      account?: PromiseOrValue<string> | null,\n      withdrawAddress?: null,\n      amount?: null\n    ): StakeWithdrawnEventFilter;\n    StakeWithdrawn(\n      account?: PromiseOrValue<string> | null,\n      withdrawAddress?: null,\n      amount?: null\n    ): StakeWithdrawnEventFilter;\n\n    \"UserOperationEvent(bytes32,address,address,uint256,bool,uint256,uint256)\"(\n      userOpHash?: PromiseOrValue<BytesLike> | null,\n      sender?: PromiseOrValue<string> | null,\n      paymaster?: PromiseOrValue<string> | null,\n      nonce?: null,\n      success?: null,\n      actualGasCost?: null,\n      actualGasUsed?: null\n    ): UserOperationEventEventFilter;\n    UserOperationEvent(\n      userOpHash?: PromiseOrValue<BytesLike> | null,\n      sender?: PromiseOrValue<string> | null,\n      paymaster?: PromiseOrValue<string> | null,\n      nonce?: null,\n      success?: null,\n      actualGasCost?: null,\n      actualGasUsed?: null\n    ): UserOperationEventEventFilter;\n\n    \"UserOperationRevertReason(bytes32,address,uint256,bytes)\"(\n      userOpHash?: PromiseOrValue<BytesLike> | null,\n      sender?: PromiseOrValue<string> | null,\n      nonce?: null,\n      revertReason?: null\n    ): UserOperationRevertReasonEventFilter;\n    UserOperationRevertReason(\n      userOpHash?: PromiseOrValue<BytesLike> | null,\n      sender?: PromiseOrValue<string> | null,\n      nonce?: null,\n      revertReason?: null\n    ): UserOperationRevertReasonEventFilter;\n\n    \"Withdrawn(address,address,uint256)\"(\n      account?: PromiseOrValue<string> | null,\n      withdrawAddress?: null,\n      amount?: null\n    ): WithdrawnEventFilter;\n    Withdrawn(\n      account?: PromiseOrValue<string> | null,\n      withdrawAddress?: null,\n      amount?: null\n    ): WithdrawnEventFilter;\n  };\n\n  estimateGas: {\n    SIG_VALIDATION_FAILED(overrides?: CallOverrides): Promise<BigNumber>;\n\n    _validateSenderAndPaymaster(\n      initCode: PromiseOrValue<BytesLike>,\n      sender: PromiseOrValue<string>,\n      paymasterAndData: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    addStake(\n      unstakeDelaySec: PromiseOrValue<BigNumberish>,\n      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }\n    ): Promise<BigNumber>;\n\n    balanceOf(\n      account: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    depositTo(\n      account: PromiseOrValue<string>,\n      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }\n    ): Promise<BigNumber>;\n\n    deposits(\n      arg0: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    getDepositInfo(\n      account: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    getNonce(\n      sender: PromiseOrValue<string>,\n      key: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    getSenderAddress(\n      initCode: PromiseOrValue<BytesLike>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<BigNumber>;\n\n    getUserOpHash(\n      userOp: UserOperationStruct,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    handleAggregatedOps(\n      opsPerAggregator: IEntryPoint.UserOpsPerAggregatorStruct[],\n      beneficiary: PromiseOrValue<string>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<BigNumber>;\n\n    handleOps(\n      ops: UserOperationStruct[],\n      beneficiary: PromiseOrValue<string>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<BigNumber>;\n\n    incrementNonce(\n      key: PromiseOrValue<BigNumberish>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<BigNumber>;\n\n    innerHandleOp(\n      callData: PromiseOrValue<BytesLike>,\n      opInfo: EntryPoint.UserOpInfoStruct,\n      context: PromiseOrValue<BytesLike>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<BigNumber>;\n\n    nonceSequenceNumber(\n      arg0: PromiseOrValue<string>,\n      arg1: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    simulateHandleOp(\n      op: UserOperationStruct,\n      target: PromiseOrValue<string>,\n      targetCallData: PromiseOrValue<BytesLike>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<BigNumber>;\n\n    simulateValidation(\n      userOp: UserOperationStruct,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<BigNumber>;\n\n    unlockStake(\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<BigNumber>;\n\n    withdrawStake(\n      withdrawAddress: PromiseOrValue<string>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<BigNumber>;\n\n    withdrawTo(\n      withdrawAddress: PromiseOrValue<string>,\n      withdrawAmount: PromiseOrValue<BigNumberish>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<BigNumber>;\n  };\n\n  populateTransaction: {\n    SIG_VALIDATION_FAILED(\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    _validateSenderAndPaymaster(\n      initCode: PromiseOrValue<BytesLike>,\n      sender: PromiseOrValue<string>,\n      paymasterAndData: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    addStake(\n      unstakeDelaySec: PromiseOrValue<BigNumberish>,\n      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }\n    ): Promise<PopulatedTransaction>;\n\n    balanceOf(\n      account: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    depositTo(\n      account: PromiseOrValue<string>,\n      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }\n    ): Promise<PopulatedTransaction>;\n\n    deposits(\n      arg0: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    getDepositInfo(\n      account: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    getNonce(\n      sender: PromiseOrValue<string>,\n      key: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    getSenderAddress(\n      initCode: PromiseOrValue<BytesLike>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<PopulatedTransaction>;\n\n    getUserOpHash(\n      userOp: UserOperationStruct,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    handleAggregatedOps(\n      opsPerAggregator: IEntryPoint.UserOpsPerAggregatorStruct[],\n      beneficiary: PromiseOrValue<string>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<PopulatedTransaction>;\n\n    handleOps(\n      ops: UserOperationStruct[],\n      beneficiary: PromiseOrValue<string>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<PopulatedTransaction>;\n\n    incrementNonce(\n      key: PromiseOrValue<BigNumberish>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<PopulatedTransaction>;\n\n    innerHandleOp(\n      callData: PromiseOrValue<BytesLike>,\n      opInfo: EntryPoint.UserOpInfoStruct,\n      context: PromiseOrValue<BytesLike>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<PopulatedTransaction>;\n\n    nonceSequenceNumber(\n      arg0: PromiseOrValue<string>,\n      arg1: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    simulateHandleOp(\n      op: UserOperationStruct,\n      target: PromiseOrValue<string>,\n      targetCallData: PromiseOrValue<BytesLike>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<PopulatedTransaction>;\n\n    simulateValidation(\n      userOp: UserOperationStruct,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<PopulatedTransaction>;\n\n    unlockStake(\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<PopulatedTransaction>;\n\n    withdrawStake(\n      withdrawAddress: PromiseOrValue<string>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<PopulatedTransaction>;\n\n    withdrawTo(\n      withdrawAddress: PromiseOrValue<string>,\n      withdrawAmount: PromiseOrValue<BigNumberish>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<PopulatedTransaction>;\n  };\n}\n"]}
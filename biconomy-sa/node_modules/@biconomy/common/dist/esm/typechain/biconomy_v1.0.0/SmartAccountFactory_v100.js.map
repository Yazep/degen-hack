{"version":3,"file":"SmartAccountFactory_v100.js","sourceRoot":"","sources":["../../../../src/typechain/biconomy_v1.0.0/SmartAccountFactory_v100.ts"],"names":[],"mappings":"","sourcesContent":["/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport type {\n  BaseContract,\n  BigNumber,\n  BigNumberish,\n  BytesLike,\n  CallOverrides,\n  ContractTransaction,\n  Overrides,\n  PopulatedTransaction,\n  Signer,\n  utils,\n} from \"ethers\";\nimport type {\n  FunctionFragment,\n  Result,\n  EventFragment,\n} from \"@ethersproject/abi\";\nimport type { Listener, Provider } from \"@ethersproject/providers\";\nimport type {\n  TypedEventFilter,\n  TypedEvent,\n  TypedListener,\n  OnEvent,\n  PromiseOrValue,\n} from \"../common\";\n\nexport interface SmartAccountFactory_v100Interface extends utils.Interface {\n  functions: {\n    \"accountCreationCode()\": FunctionFragment;\n    \"basicImplementation()\": FunctionFragment;\n    \"deployAccount(address)\": FunctionFragment;\n    \"deployCounterFactualAccount(address,uint256)\": FunctionFragment;\n    \"getAddressForCounterFactualAccount(address,uint256)\": FunctionFragment;\n    \"minimalHandler()\": FunctionFragment;\n  };\n\n  getFunction(\n    nameOrSignatureOrTopic:\n      | \"accountCreationCode\"\n      | \"basicImplementation\"\n      | \"deployAccount\"\n      | \"deployCounterFactualAccount\"\n      | \"getAddressForCounterFactualAccount\"\n      | \"minimalHandler\"\n  ): FunctionFragment;\n\n  encodeFunctionData(\n    functionFragment: \"accountCreationCode\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"basicImplementation\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"deployAccount\",\n    values: [PromiseOrValue<string>]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"deployCounterFactualAccount\",\n    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"getAddressForCounterFactualAccount\",\n    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"minimalHandler\",\n    values?: undefined\n  ): string;\n\n  decodeFunctionResult(\n    functionFragment: \"accountCreationCode\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"basicImplementation\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"deployAccount\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"deployCounterFactualAccount\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"getAddressForCounterFactualAccount\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"minimalHandler\",\n    data: BytesLike\n  ): Result;\n\n  events: {\n    \"AccountCreation(address,address,uint256)\": EventFragment;\n    \"AccountCreationWithoutIndex(address,address)\": EventFragment;\n  };\n\n  getEvent(nameOrSignatureOrTopic: \"AccountCreation\"): EventFragment;\n  getEvent(\n    nameOrSignatureOrTopic: \"AccountCreationWithoutIndex\"\n  ): EventFragment;\n}\n\nexport interface AccountCreationEventObject {\n  account: string;\n  owner: string;\n  index: BigNumber;\n}\nexport type AccountCreationEvent = TypedEvent<\n  [string, string, BigNumber],\n  AccountCreationEventObject\n>;\n\nexport type AccountCreationEventFilter = TypedEventFilter<AccountCreationEvent>;\n\nexport interface AccountCreationWithoutIndexEventObject {\n  account: string;\n  owner: string;\n}\nexport type AccountCreationWithoutIndexEvent = TypedEvent<\n  [string, string],\n  AccountCreationWithoutIndexEventObject\n>;\n\nexport type AccountCreationWithoutIndexEventFilter =\n  TypedEventFilter<AccountCreationWithoutIndexEvent>;\n\nexport interface SmartAccountFactory_v100 extends BaseContract {\n  connect(signerOrProvider: Signer | Provider | string): this;\n  attach(addressOrName: string): this;\n  deployed(): Promise<this>;\n\n  interface: SmartAccountFactory_v100Interface;\n\n  queryFilter<TEvent extends TypedEvent>(\n    event: TypedEventFilter<TEvent>,\n    fromBlockOrBlockhash?: string | number | undefined,\n    toBlock?: string | number | undefined\n  ): Promise<Array<TEvent>>;\n\n  listeners<TEvent extends TypedEvent>(\n    eventFilter?: TypedEventFilter<TEvent>\n  ): Array<TypedListener<TEvent>>;\n  listeners(eventName?: string): Array<Listener>;\n  removeAllListeners<TEvent extends TypedEvent>(\n    eventFilter: TypedEventFilter<TEvent>\n  ): this;\n  removeAllListeners(eventName?: string): this;\n  off: OnEvent<this>;\n  on: OnEvent<this>;\n  once: OnEvent<this>;\n  removeListener: OnEvent<this>;\n\n  functions: {\n    accountCreationCode(overrides?: CallOverrides): Promise<[string]>;\n\n    basicImplementation(overrides?: CallOverrides): Promise<[string]>;\n\n    deployAccount(\n      _owner: PromiseOrValue<string>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<ContractTransaction>;\n\n    deployCounterFactualAccount(\n      _owner: PromiseOrValue<string>,\n      _index: PromiseOrValue<BigNumberish>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<ContractTransaction>;\n\n    getAddressForCounterFactualAccount(\n      _owner: PromiseOrValue<string>,\n      _index: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<[string] & { _account: string }>;\n\n    minimalHandler(overrides?: CallOverrides): Promise<[string]>;\n  };\n\n  accountCreationCode(overrides?: CallOverrides): Promise<string>;\n\n  basicImplementation(overrides?: CallOverrides): Promise<string>;\n\n  deployAccount(\n    _owner: PromiseOrValue<string>,\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<ContractTransaction>;\n\n  deployCounterFactualAccount(\n    _owner: PromiseOrValue<string>,\n    _index: PromiseOrValue<BigNumberish>,\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<ContractTransaction>;\n\n  getAddressForCounterFactualAccount(\n    _owner: PromiseOrValue<string>,\n    _index: PromiseOrValue<BigNumberish>,\n    overrides?: CallOverrides\n  ): Promise<string>;\n\n  minimalHandler(overrides?: CallOverrides): Promise<string>;\n\n  callStatic: {\n    accountCreationCode(overrides?: CallOverrides): Promise<string>;\n\n    basicImplementation(overrides?: CallOverrides): Promise<string>;\n\n    deployAccount(\n      _owner: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<string>;\n\n    deployCounterFactualAccount(\n      _owner: PromiseOrValue<string>,\n      _index: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<string>;\n\n    getAddressForCounterFactualAccount(\n      _owner: PromiseOrValue<string>,\n      _index: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<string>;\n\n    minimalHandler(overrides?: CallOverrides): Promise<string>;\n  };\n\n  filters: {\n    \"AccountCreation(address,address,uint256)\"(\n      account?: PromiseOrValue<string> | null,\n      owner?: PromiseOrValue<string> | null,\n      index?: PromiseOrValue<BigNumberish> | null\n    ): AccountCreationEventFilter;\n    AccountCreation(\n      account?: PromiseOrValue<string> | null,\n      owner?: PromiseOrValue<string> | null,\n      index?: PromiseOrValue<BigNumberish> | null\n    ): AccountCreationEventFilter;\n\n    \"AccountCreationWithoutIndex(address,address)\"(\n      account?: PromiseOrValue<string> | null,\n      owner?: PromiseOrValue<string> | null\n    ): AccountCreationWithoutIndexEventFilter;\n    AccountCreationWithoutIndex(\n      account?: PromiseOrValue<string> | null,\n      owner?: PromiseOrValue<string> | null\n    ): AccountCreationWithoutIndexEventFilter;\n  };\n\n  estimateGas: {\n    accountCreationCode(overrides?: CallOverrides): Promise<BigNumber>;\n\n    basicImplementation(overrides?: CallOverrides): Promise<BigNumber>;\n\n    deployAccount(\n      _owner: PromiseOrValue<string>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<BigNumber>;\n\n    deployCounterFactualAccount(\n      _owner: PromiseOrValue<string>,\n      _index: PromiseOrValue<BigNumberish>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<BigNumber>;\n\n    getAddressForCounterFactualAccount(\n      _owner: PromiseOrValue<string>,\n      _index: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    minimalHandler(overrides?: CallOverrides): Promise<BigNumber>;\n  };\n\n  populateTransaction: {\n    accountCreationCode(\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    basicImplementation(\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    deployAccount(\n      _owner: PromiseOrValue<string>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<PopulatedTransaction>;\n\n    deployCounterFactualAccount(\n      _owner: PromiseOrValue<string>,\n      _index: PromiseOrValue<BigNumberish>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<PopulatedTransaction>;\n\n    getAddressForCounterFactualAccount(\n      _owner: PromiseOrValue<string>,\n      _index: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    minimalHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n  };\n}\n"]}
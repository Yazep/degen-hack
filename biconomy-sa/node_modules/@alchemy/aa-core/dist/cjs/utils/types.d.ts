export type NoUndefined<T> = T extends undefined ? never : T;
export type IsUndefined<T> = [undefined] extends [T] ? true : false;
export type RequiredBy<TType, TKeys extends keyof TType> = Required<Pick<TType, TKeys>> & Omit<TType, TKeys>;
export type Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
export type WithRequired<T, K extends keyof T> = Required<Pick<T, K>>;
export type WithOptional<T, K extends keyof T> = Pick<Partial<T>, K>;

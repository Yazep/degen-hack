import { type Transport } from "viem";
import type { SmartAccountSigner } from "../signer/types.js";
import { type OwnedSmartContractAccount, type ToSmartContractAccountParams } from "./smartContractAccount.js";
import type { SimpleSmartAccountParams } from "./types.js";
export type SimpleSmartAccount<TOwner extends SmartAccountSigner> = OwnedSmartContractAccount<"SimpleAccount", TOwner>;
export declare const createSimpleSmartAccount: <TTransport extends Transport = Transport, TOwner extends SmartAccountSigner<any> = SmartAccountSigner<any>>(params: Omit<import("zod").baseObjectInputType<{
    initCode: import("zod").ZodOptional<import("zod").ZodEffects<import("zod").ZodString, `0x${string}`, string>>;
    chain: import("zod").ZodType<import("viem").Chain, import("zod").ZodTypeDef, import("viem").Chain>;
    factoryAddress: import("zod").ZodEffects<import("zod").ZodString, `0x${string}`, string>;
    entryPointAddress: import("zod").ZodOptional<import("zod").ZodEffects<import("zod").ZodString, `0x${string}`, string>>;
    accountAddress: import("zod").ZodOptional<import("zod").ZodEffects<import("zod").ZodString, `0x${string}`, string>>;
    transport: import("zod").ZodType<TTransport, import("zod").ZodTypeDef, TTransport>;
    owner: import("zod").ZodType<TOwner, import("zod").ZodTypeDef, TOwner>;
    index: import("zod").ZodOptional<import("zod").ZodBigInt>;
}> extends infer T ? { [k in keyof T]: import("zod").baseObjectInputType<{
    initCode: import("zod").ZodOptional<import("zod").ZodEffects<import("zod").ZodString, `0x${string}`, string>>;
    chain: import("zod").ZodType<import("viem").Chain, import("zod").ZodTypeDef, import("viem").Chain>;
    factoryAddress: import("zod").ZodEffects<import("zod").ZodString, `0x${string}`, string>;
    entryPointAddress: import("zod").ZodOptional<import("zod").ZodEffects<import("zod").ZodString, `0x${string}`, string>>;
    accountAddress: import("zod").ZodOptional<import("zod").ZodEffects<import("zod").ZodString, `0x${string}`, string>>;
    transport: import("zod").ZodType<TTransport, import("zod").ZodTypeDef, TTransport>;
    owner: import("zod").ZodType<TOwner, import("zod").ZodTypeDef, TOwner>;
    index: import("zod").ZodOptional<import("zod").ZodBigInt>;
}>[k]; } : never, "chain" | "rpcClient"> & Pick<ToSmartContractAccountParams, "chain" | "transport">) => Promise<SimpleSmartAccount<TOwner>>;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSimpleSmartAccount = void 0;
const viem_1 = require("viem");
const SimpleAccountAbi_js_1 = require("../abis/SimpleAccountAbi.js");
const SimpleAccountFactoryAbi_js_1 = require("../abis/SimpleAccountFactoryAbi.js");
const bundlerClient_js_1 = require("../client/bundlerClient.js");
const account_js_1 = require("../errors/account.js");
const base_js_1 = require("./base.js");
const schema_js_1 = require("./schema.js");
const smartContractAccount_js_1 = require("./smartContractAccount.js");
class SimpleSmartContractAccount extends base_js_1.BaseSmartContractAccount {
    constructor(params) {
        (0, schema_js_1.SimpleSmartAccountParamsSchema)().parse(params);
        const client = (0, bundlerClient_js_1.createBundlerClient)({
            transport: params.transport,
            chain: params.chain,
        });
        super({ ...params, rpcClient: client });
        Object.defineProperty(this, "index", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.owner = params.owner;
        this.index = params.index ?? 0n;
    }
    getDummySignature() {
        return "0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c";
    }
    async encodeExecute(target, value, data) {
        return (0, viem_1.encodeFunctionData)({
            abi: SimpleAccountAbi_js_1.SimpleAccountAbi,
            functionName: "execute",
            args: [target, value, data],
        });
    }
    async encodeBatchExecute(txs) {
        const [targets, datas] = txs.reduce((accum, curr) => {
            accum[0].push(curr.target);
            accum[1].push(curr.data);
            return accum;
        }, [[], []]);
        return (0, viem_1.encodeFunctionData)({
            abi: SimpleAccountAbi_js_1.SimpleAccountAbi,
            functionName: "executeBatch",
            args: [targets, datas],
        });
    }
    signMessage(msg) {
        if (typeof msg === "string" && msg.startsWith("0x")) {
            msg = (0, viem_1.hexToBytes)(msg);
        }
        else if (typeof msg === "string") {
            msg = new TextEncoder().encode(msg);
        }
        return this.owner.signMessage(msg);
    }
    setOwner(owner) {
        this.owner = owner;
    }
    async getAccountInitCode() {
        return (0, viem_1.concatHex)([
            this.factoryAddress,
            (0, viem_1.encodeFunctionData)({
                abi: SimpleAccountFactoryAbi_js_1.SimpleAccountFactoryAbi,
                functionName: "createAccount",
                args: [await this.owner.getAddress(), this.index],
            }),
        ]);
    }
}
const createSimpleSmartAccount = async (params) => {
    if (!params.owner)
        throw new account_js_1.AccountRequiresOwnerError("SimpleAccount");
    const simpleAccount = new SimpleSmartContractAccount(params);
    const parsedParams = (0, schema_js_1.SimpleSmartAccountParamsSchema)().parse(params);
    const base = await (0, smartContractAccount_js_1.toSmartContractAccount)({
        source: "SimpleAccount",
        transport: params.transport,
        chain: params.chain,
        encodeBatchExecute: simpleAccount.encodeBatchExecute.bind(simpleAccount),
        encodeExecute: (tx) => simpleAccount.encodeExecute.bind(simpleAccount)(tx.target, tx.value ?? 0n, tx.data),
        entrypointAddress: simpleAccount.getEntryPointAddress(),
        getAccountInitCode: async () => {
            if (parsedParams.initCode)
                return parsedParams.initCode;
            return simpleAccount.getAccountInitCode();
        },
        getDummySignature: simpleAccount.getDummySignature.bind(simpleAccount),
        signMessage: ({ message }) => simpleAccount.signMessage(typeof message === "string" ? message : message.raw),
        signTypedData: simpleAccount.signTypedData.bind(simpleAccount),
        accountAddress: parsedParams.accountAddress,
    });
    return {
        ...base,
        getOwner: () => simpleAccount.getOwner(),
        setOwner: (owner) => simpleAccount.setOwner.bind(simpleAccount)(owner),
    };
};
exports.createSimpleSmartAccount = createSimpleSmartAccount;
//# sourceMappingURL=simple.js.map
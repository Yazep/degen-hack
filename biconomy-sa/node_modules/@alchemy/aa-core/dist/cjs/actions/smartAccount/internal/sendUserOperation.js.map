{"version":3,"file":"sendUserOperation.js","sourceRoot":"","sources":["../../../../../src/actions/smartAccount/internal/sendUserOperation.ts"],"names":[],"mappings":";;;AAOA,2DAAkE;AAClE,yDAA+D;AAC/D,uEAA6E;AAE7E,sDAIiC;AAE1B,MAAM,kBAAkB,GASS,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE;IAC7D,MAAM,EAAE,OAAO,GAAG,MAAM,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC;IAC1C,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,MAAM,IAAI,iCAAoB,EAAE,CAAC;IACnC,CAAC;IAED,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QAClB,MAAM,IAAI,8BAAkB,EAAE,CAAC;IACjC,CAAC;IAED,MAAM,OAAO,GAAG,IAAA,sBAAW,EAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC3C,IAAI,CAAC,IAAA,yBAAc,EAAC,OAAO,CAAC,EAAE,CAAC;QAC7B,MAAM,IAAI,4CAAyB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACrD,CAAC;IAED,OAAO,CAAC,SAAS,GAAG,MAAM,OAAO,CAAC,qBAAqB,CACrD,IAAA,+BAAoB,EAClB,OAAO,EACP,OAAO,CAAC,aAAa,EAAE,EACvB,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CACxB,CACF,CAAC;IAEF,OAAO;QACL,IAAI,EAAE,MAAM,MAAM,CAAC,oBAAoB,CAAC,OAAO,EAAE,OAAO,CAAC,aAAa,EAAE,CAAC;QACzE,OAAO;KACR,CAAC;AACJ,CAAC,CAAC;AApCW,QAAA,kBAAkB,sBAoC7B","sourcesContent":["import type { Chain, Transport } from \"viem\";\nimport type {\n  GetAccountParameter,\n  SmartContractAccount,\n} from \"../../../account/smartContractAccount\";\nimport type { BaseSmartAccountClient } from \"../../../client/smartAccountClient\";\nimport type { SendUserOperationResult } from \"../../../client/types\";\nimport { AccountNotFoundError } from \"../../../errors/account.js\";\nimport { ChainNotFoundError } from \"../../../errors/client.js\";\nimport { InvalidUserOperationError } from \"../../../errors/useroperation.js\";\nimport type { UserOperationStruct } from \"../../../types\";\nimport {\n  deepHexlify,\n  getUserOperationHash,\n  isValidRequest,\n} from \"../../../utils/index.js\";\n\nexport const _sendUserOperation: <\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined\n>(\n  client: BaseSmartAccountClient<TTransport, TChain, TAccount>,\n  args: { uoStruct: UserOperationStruct } & GetAccountParameter<TAccount>\n) => Promise<SendUserOperationResult> = async (client, args) => {\n  const { account = client.account } = args;\n  if (!account) {\n    throw new AccountNotFoundError();\n  }\n\n  if (!client.chain) {\n    throw new ChainNotFoundError();\n  }\n\n  const request = deepHexlify(args.uoStruct);\n  if (!isValidRequest(request)) {\n    throw new InvalidUserOperationError(args.uoStruct);\n  }\n\n  request.signature = await account.signUserOperationHash(\n    getUserOperationHash(\n      request,\n      account.getEntrypoint(),\n      BigInt(client.chain.id)\n    )\n  );\n\n  return {\n    hash: await client.sendRawUserOperation(request, account.getEntrypoint()),\n    request,\n  };\n};\n"]}
{"version":3,"file":"buildUserOperation.js","sourceRoot":"","sources":["../../../../src/actions/smartAccount/buildUserOperation.ts"],"names":[],"mappings":";;;AAEA,kFAAgF;AAChF,wDAA+D;AAC/D,sDAAiE;AAGjE,4EAAuE;AAGhE,MAAM,kBAAkB,GASK,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE;IACzD,MAAM,EAAE,OAAO,GAAG,MAAM,CAAC,OAAO,EAAE,SAAS,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC;IACzD,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,MAAM,IAAI,iCAAoB,EAAE,CAAC;IACnC,CAAC;IAED,IAAI,CAAC,IAAA,kDAAwB,EAAC,MAAM,CAAC,EAAE,CAAC;QACtC,MAAM,IAAI,mCAAuB,CAC/B,wBAAwB,EACxB,oBAAoB,CACrB,CAAC;IACJ,CAAC;IAED,OAAO,IAAA,2CAAmB,EAAC,MAAM,EAAE;QACjC,EAAE,EAAE;YACF,QAAQ,EAAE,OAAO,CAAC,WAAW,EAAE;YAC/B,MAAM,EAAE,OAAO,CAAC,OAAO;YACvB,KAAK,EAAE,OAAO,CAAC,QAAQ,EAAE;YACzB,QAAQ,EAAE,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC;gBACzB,CAAC,CAAC,OAAO,CAAC,kBAAkB,CAAC,EAAE,CAAC;gBAChC,CAAC,CAAC,OAAO,EAAE,KAAK,QAAQ;oBACxB,CAAC,CAAC,EAAE;oBACJ,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE,CAAC;YAC7B,SAAS,EAAE,OAAO,CAAC,iBAAiB,EAAE;SACJ;QACpC,SAAS;QACT,OAAO;KACR,CAAC,CAAC;AACL,CAAC,CAAC;AArCW,QAAA,kBAAkB,sBAqC7B","sourcesContent":["import type { Chain, Client, Transport } from \"viem\";\nimport type { SmartContractAccount } from \"../../account/smartContractAccount.js\";\nimport { isBaseSmartAccountClient } from \"../../client/isSmartAccountClient.js\";\nimport { AccountNotFoundError } from \"../../errors/account.js\";\nimport { IncompatibleClientError } from \"../../errors/client.js\";\nimport type { UserOperationStruct } from \"../../types.js\";\nimport type { Deferrable } from \"../../utils/index.js\";\nimport { _runMiddlewareStack } from \"./internal/runMiddlewareStack.js\";\nimport type { SendUserOperationParameters } from \"./types\";\n\nexport const buildUserOperation: <\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined\n>(\n  client: Client<TTransport, TChain, TAccount>,\n  args: SendUserOperationParameters<TAccount>\n) => Promise<UserOperationStruct> = async (client, args) => {\n  const { account = client.account, overrides, uo } = args;\n  if (!account) {\n    throw new AccountNotFoundError();\n  }\n\n  if (!isBaseSmartAccountClient(client)) {\n    throw new IncompatibleClientError(\n      \"BaseSmartAccountClient\",\n      \"buildUserOperation\"\n    );\n  }\n\n  return _runMiddlewareStack(client, {\n    uo: {\n      initCode: account.getInitCode(),\n      sender: account.address,\n      nonce: account.getNonce(),\n      callData: Array.isArray(uo)\n        ? account.encodeBatchExecute(uo)\n        : typeof uo === \"string\"\n        ? uo\n        : account.encodeExecute(uo),\n      signature: account.getDummySignature(),\n    } as Deferrable<UserOperationStruct>,\n    overrides,\n    account,\n  });\n};\n"]}
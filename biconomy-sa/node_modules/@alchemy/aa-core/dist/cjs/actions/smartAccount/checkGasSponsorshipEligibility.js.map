{"version":3,"file":"checkGasSponsorshipEligibility.js","sourceRoot":"","sources":["../../../../src/actions/smartAccount/checkGasSponsorshipEligibility.ts"],"names":[],"mappings":";;;AAEA,kFAAgF;AAChF,sDAAiE;AAEjE,mEAA6D;AAGtD,MAAM,8BAA8B,GASnB,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE;IAC7C,IAAI,CAAC,IAAA,kDAAwB,EAAC,MAAM,CAAC,EAAE,CAAC;QACtC,MAAM,IAAI,mCAAuB,CAC/B,wBAAwB,EACxB,gCAAgC,CACjC,CAAC;IACJ,CAAC;IAED,OAAO,IAAA,0CAAkB,EAAC,MAAM,EAAE,IAAI,CAAC;SACpC,IAAI,CACH,CAAC,mBAAwC,EAAE,EAAE,CAC3C,mBAAmB,CAAC,gBAAgB,KAAK,IAAI;QAC7C,mBAAmB,CAAC,gBAAgB,KAAK,IAAI,CAChD;SACA,KAAK,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC;AACxB,CAAC,CAAC;AAxBW,QAAA,8BAA8B,kCAwBzC","sourcesContent":["import type { Chain, Client, Transport } from \"viem\";\nimport type { SmartContractAccount } from \"../../account/smartContractAccount.js\";\nimport { isBaseSmartAccountClient } from \"../../client/isSmartAccountClient.js\";\nimport { IncompatibleClientError } from \"../../errors/client.js\";\nimport type { UserOperationStruct } from \"../../types.js\";\nimport { buildUserOperation } from \"./buildUserOperation.js\";\nimport type { SendUserOperationParameters } from \"./types\";\n\nexport const checkGasSponsorshipEligibility: <\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined\n>(\n  client: Client<TTransport, TChain, TAccount>,\n  args: SendUserOperationParameters<TAccount>\n) => Promise<boolean> = async (client, args) => {\n  if (!isBaseSmartAccountClient(client)) {\n    throw new IncompatibleClientError(\n      \"BaseSmartAccountClient\",\n      \"checkGasSponsorshipEligibility\"\n    );\n  }\n\n  return buildUserOperation(client, args)\n    .then(\n      (userOperationStruct: UserOperationStruct) =>\n        userOperationStruct.paymasterAndData !== \"0x\" &&\n        userOperationStruct.paymasterAndData !== null\n    )\n    .catch(() => false);\n};\n"]}
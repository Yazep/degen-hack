{"version":3,"file":"simple.js","sourceRoot":"","sources":["../../../src/account/simple.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Address } from \"abitype\";\nimport {\n  concatHex,\n  encodeFunctionData,\n  hexToBytes,\n  type FallbackTransport,\n  type Hex,\n  type Transport,\n} from \"viem\";\nimport { SimpleAccountAbi } from \"../abis/SimpleAccountAbi.js\";\nimport { SimpleAccountFactoryAbi } from \"../abis/SimpleAccountFactoryAbi.js\";\nimport { createBundlerClient } from \"../client/bundlerClient.js\";\nimport { AccountRequiresOwnerError } from \"../errors/account.js\";\nimport type { SmartAccountSigner } from \"../signer/types.js\";\nimport type { BatchUserOperationCallData } from \"../types.js\";\nimport { BaseSmartContractAccount } from \"./base.js\";\nimport { SimpleSmartAccountParamsSchema } from \"./schema.js\";\nimport {\n  toSmartContractAccount,\n  type OwnedSmartContractAccount,\n  type ToSmartContractAccountParams,\n} from \"./smartContractAccount.js\";\nimport type { SimpleSmartAccountParams } from \"./types.js\";\n\nclass SimpleSmartContractAccount<\n  TTransport extends Transport | FallbackTransport = Transport,\n  TOwner extends SmartAccountSigner = SmartAccountSigner\n> extends BaseSmartContractAccount<TTransport, TOwner> {\n  protected index: bigint;\n\n  constructor(params: SimpleSmartAccountParams<TTransport, TOwner>) {\n    SimpleSmartAccountParamsSchema<TTransport>().parse(params);\n\n    // This is a hack for now, we should kill the SimpleSmart Account when we kill Base Account\n    const client = createBundlerClient({\n      transport: params.transport as TTransport,\n      chain: params.chain,\n    });\n    super({ ...params, rpcClient: client });\n    this.owner = params.owner as TOwner;\n    this.index = params.index ?? 0n;\n  }\n\n  getDummySignature(): `0x${string}` {\n    return \"0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c\";\n  }\n\n  async encodeExecute(\n    target: Hex,\n    value: bigint,\n    data: Hex\n  ): Promise<`0x${string}`> {\n    return encodeFunctionData({\n      abi: SimpleAccountAbi,\n      functionName: \"execute\",\n      args: [target, value, data],\n    });\n  }\n\n  override async encodeBatchExecute(\n    txs: BatchUserOperationCallData\n  ): Promise<`0x${string}`> {\n    const [targets, datas] = txs.reduce(\n      (accum, curr) => {\n        accum[0].push(curr.target);\n        accum[1].push(curr.data);\n\n        return accum;\n      },\n      [[], []] as [Address[], Hex[]]\n    );\n\n    return encodeFunctionData({\n      abi: SimpleAccountAbi,\n      functionName: \"executeBatch\",\n      args: [targets, datas],\n    });\n  }\n\n  signMessage(msg: Uint8Array | string): Promise<`0x${string}`> {\n    if (typeof msg === \"string\" && msg.startsWith(\"0x\")) {\n      msg = hexToBytes(msg as Hex);\n    } else if (typeof msg === \"string\") {\n      msg = new TextEncoder().encode(msg);\n    }\n\n    return this.owner.signMessage(msg);\n  }\n\n  setOwner(owner: TOwner): void {\n    this.owner = owner;\n  }\n\n  public async getAccountInitCode(): Promise<`0x${string}`> {\n    return concatHex([\n      this.factoryAddress,\n      encodeFunctionData({\n        abi: SimpleAccountFactoryAbi,\n        functionName: \"createAccount\",\n        args: [await this.owner.getAddress(), this.index],\n      }),\n    ]);\n  }\n}\n\nexport type SimpleSmartAccount<TOwner extends SmartAccountSigner> =\n  OwnedSmartContractAccount<\"SimpleAccount\", TOwner>;\n\nexport const createSimpleSmartAccount = async <\n  TTransport extends Transport = Transport,\n  TOwner extends SmartAccountSigner = SmartAccountSigner\n>(\n  params: Omit<\n    SimpleSmartAccountParams<TTransport, TOwner>,\n    \"rpcClient\" | \"chain\"\n  > &\n    Pick<ToSmartContractAccountParams, \"chain\" | \"transport\">\n): Promise<SimpleSmartAccount<TOwner>> => {\n  if (!params.owner) throw new AccountRequiresOwnerError(\"SimpleAccount\");\n\n  // @ts-expect-error base account allows for optional owners, but simple account requires it\n  const simpleAccount = new SimpleSmartContractAccount<TTransport>(params);\n  const parsedParams = SimpleSmartAccountParamsSchema<\n    TTransport,\n    TOwner\n  >().parse(params);\n\n  const base = await toSmartContractAccount({\n    source: \"SimpleAccount\",\n    transport: params.transport,\n    chain: params.chain,\n    encodeBatchExecute: simpleAccount.encodeBatchExecute.bind(simpleAccount),\n    encodeExecute: (tx) =>\n      simpleAccount.encodeExecute.bind(simpleAccount)(\n        tx.target,\n        tx.value ?? 0n,\n        tx.data\n      ),\n    entrypointAddress: simpleAccount.getEntryPointAddress(),\n    getAccountInitCode: async () => {\n      if (parsedParams.initCode) return parsedParams.initCode;\n      return simpleAccount.getAccountInitCode();\n    },\n    getDummySignature: simpleAccount.getDummySignature.bind(simpleAccount),\n    signMessage: ({ message }) =>\n      simpleAccount.signMessage(\n        typeof message === \"string\" ? message : message.raw\n      ),\n    // @ts-expect-error these types still represent the same thing, but they're just a little off in there definitions\n    signTypedData: simpleAccount.signTypedData.bind(simpleAccount),\n    accountAddress: parsedParams.accountAddress,\n  });\n\n  return {\n    ...base,\n    getOwner: () => simpleAccount.getOwner() as TOwner,\n    setOwner: (owner: TOwner) =>\n      simpleAccount.setOwner.bind(simpleAccount)(owner),\n  };\n};\n"]}
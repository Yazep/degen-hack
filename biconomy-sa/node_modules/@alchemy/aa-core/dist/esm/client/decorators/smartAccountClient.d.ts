import type { Address, Chain, Client, Hex, SendTransactionParameters, Transport, TypedData, WaitForTransactionReceiptParameters } from "viem";
import type { GetAccountParameter, SmartContractAccount } from "../../account/smartContractAccount";
import { type SignMessageParameters } from "../../actions/smartAccount/signMessage.js";
import { type SignTypedDataParameters } from "../../actions/smartAccount/signTypedData.js";
import type { BuildUserOperationFromTransactionsResult, DropAndReplaceUserOperationParameters, SendTransactionsParameters, SendUserOperationParameters, UpgradeAccountParams } from "../../actions/smartAccount/types";
import type { UserOperationStruct } from "../../types";
import type { IsUndefined } from "../../utils";
import type { SendUserOperationResult } from "../types";
export type BaseSmartAccountClientActions<TChain extends Chain | undefined = Chain | undefined, TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined> = {
    buildUserOperation: (args: SendUserOperationParameters<TAccount>) => Promise<UserOperationStruct>;
    buildUserOperationFromTx: (args: SendTransactionParameters<TChain, TAccount>) => Promise<UserOperationStruct>;
    buildUserOperationFromTxs: (args: SendTransactionsParameters<TAccount>) => Promise<BuildUserOperationFromTransactionsResult>;
    checkGasSponsorshipEligibility: (args: SendUserOperationParameters<TAccount>) => Promise<boolean>;
    dropAndReplaceUserOperation: (args: DropAndReplaceUserOperationParameters<TAccount>) => Promise<SendUserOperationResult>;
    sendTransaction: <TChainOverride extends Chain | undefined = undefined>(args: SendTransactionParameters<TChain, TAccount, TChainOverride>) => Promise<Hex>;
    sendTransactions: (args: SendTransactionsParameters<TAccount>) => Promise<Hex>;
    sendUserOperation: (args: SendUserOperationParameters<TAccount>) => Promise<SendUserOperationResult>;
    waitForUserOperationTransaction: (args: WaitForTransactionReceiptParameters) => Promise<Hex>;
    upgradeAccount: (args: UpgradeAccountParams<TAccount>) => Promise<Hex>;
    signMessage: (args: SignMessageParameters<TAccount>) => Promise<Hex>;
    signTypedData: <const TTypedData extends TypedData | {
        [key: string]: unknown;
    }, TPrimaryType extends string = string>(args: SignTypedDataParameters<TTypedData, TPrimaryType, TAccount>) => Promise<Hex>;
    signMessageWith6492: (args: SignMessageParameters<TAccount>) => Promise<Hex>;
    signTypedDataWith6492: <const TTypedData extends TypedData | {
        [key: string]: unknown;
    }, TPrimaryType extends string = string>(args: SignTypedDataParameters<TTypedData, TPrimaryType, TAccount>) => Promise<Hex>;
} & (IsUndefined<TAccount> extends false ? {
    getAddress: () => Address;
} : {
    getAddress: (args: GetAccountParameter<TAccount>) => Address;
});
export declare const smartAccountClientActions: <TTransport extends Transport = Transport, TChain extends Chain | undefined = Chain | undefined, TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined>(client: Client<TTransport, TChain, TAccount>) => BaseSmartAccountClientActions<TChain, TAccount>;

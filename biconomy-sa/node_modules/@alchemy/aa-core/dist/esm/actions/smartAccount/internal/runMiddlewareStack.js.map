{"version":3,"file":"runMiddlewareStack.js","sourceRoot":"","sources":["../../../../../src/actions/smartAccount/internal/runMiddlewareStack.ts"],"names":[],"mappings":"AAMA,OAAO,EAAE,oBAAoB,EAAE,MAAM,4BAA4B,CAAC;AAClE,OAAO,EAAE,+BAA+B,EAAE,MAAM,uDAAuD,CAAC;AAKxG,OAAO,EAAE,iBAAiB,EAAmB,MAAM,yBAAyB,CAAC;AAE7E,MAAM,SAAS,GACb,CAAU,GAAG,GAAyC,EAAE,EAAE,CAC1D,KAAK,EAAE,CAAI,EAAE,IAAU,EAAE,EAAE;IACzB,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,KAAK,MAAM,EAAE,IAAI,GAAG,EAAE,CAAC;QACrB,MAAM,GAAG,MAAM,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAClC,CAAC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAEJ,MAAM,CAAC,MAAM,mBAAmB,GAYI,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE;IACzD,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,OAAO,GAAG,MAAM,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC;IACzD,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,MAAM,IAAI,oBAAoB,EAAE,CAAC;IACnC,CAAC;IAED,MAAM,MAAM,GAAG,MAAM,SAAS,CAC5B,MAAM,CAAC,UAAU,CAAC,qBAAqB,EACvC,MAAM,CAAC,UAAU,CAAC,YAAY,EAC9B,MAAM,CAAC,UAAU,CAAC,YAAY,EAC9B,MAAM,CAAC,UAAU,CAAC,gBAAgB,EAClC,SAAS,EAAE,gBAAgB;QACzB,CAAC,CAAC,+BAA+B;QACjC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,gBAAgB,EACtC,MAAM,CAAC,UAAU,CAAC,sBAAsB,CACzC,CAAC,EAAE,EAAE,EAAE,SAAS,EAAE,UAAU,EAAE,MAAM,CAAC,UAAU,EAAE,OAAO,EAAE,CAAC,CAAC;IAE7D,OAAO,iBAAiB,CAAsB,MAAM,CAAC,CAAC;AACxD,CAAC,CAAC","sourcesContent":["import type { Chain, Transport } from \"viem\";\nimport type {\n  GetAccountParameter,\n  SmartContractAccount,\n} from \"../../../account/smartContractAccount\";\nimport type { BaseSmartAccountClient } from \"../../../client/smartAccountClient\";\nimport { AccountNotFoundError } from \"../../../errors/account.js\";\nimport { overridePaymasterDataMiddleware } from \"../../../middleware/defaults/overridePaymasterData.js\";\nimport type {\n  UserOperationOverrides,\n  UserOperationStruct,\n} from \"../../../types\";\nimport { resolveProperties, type Deferrable } from \"../../../utils/index.js\";\n\nconst asyncPipe =\n  <S, Opts>(...fns: ((s: S, opts: Opts) => Promise<S>)[]) =>\n  async (s: S, opts: Opts) => {\n    let result = s;\n    for (const fn of fns) {\n      result = await fn(result, opts);\n    }\n    return result;\n  };\n\nexport const _runMiddlewareStack: <\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined\n>(\n  client: BaseSmartAccountClient<TTransport, TChain, TAccount>,\n  args: {\n    uo: Deferrable<UserOperationStruct>;\n    overrides?: UserOperationOverrides;\n  } & GetAccountParameter<TAccount>\n) => Promise<UserOperationStruct> = async (client, args) => {\n  const { uo, overrides, account = client.account } = args;\n  if (!account) {\n    throw new AccountNotFoundError();\n  }\n\n  const result = await asyncPipe(\n    client.middleware.dummyPaymasterAndData,\n    client.middleware.feeEstimator,\n    client.middleware.gasEstimator,\n    client.middleware.customMiddleware,\n    overrides?.paymasterAndData\n      ? overridePaymasterDataMiddleware\n      : client.middleware.paymasterAndData,\n    client.middleware.userOperationSimulator\n  )(uo, { overrides, feeOptions: client.feeOptions, account });\n\n  return resolveProperties<UserOperationStruct>(result);\n};\n"]}
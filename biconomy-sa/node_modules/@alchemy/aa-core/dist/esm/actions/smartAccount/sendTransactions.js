import { isBaseSmartAccountClient } from "../../client/isSmartAccountClient.js";
import { AccountNotFoundError } from "../../errors/account.js";
import { IncompatibleClientError } from "../../errors/client.js";
import { buildUserOperationFromTxs } from "./buildUserOperationFromTxs.js";
import { sendUserOperation } from "./sendUserOperation.js";
import { waitForUserOperationTransaction } from "./waitForUserOperationTransacation.js";
export const sendTransactions = async (client, args) => {
    const { requests, overrides, account = client.account } = args;
    if (!account) {
        throw new AccountNotFoundError();
    }
    if (!isBaseSmartAccountClient(client)) {
        throw new IncompatibleClientError("BaseSmartAccountClient", "sendTransactions");
    }
    const { batch, overrides: _overrides } = await buildUserOperationFromTxs(client, {
        requests,
        overrides,
        account,
    });
    const { hash } = await sendUserOperation(client, {
        uo: batch,
        overrides: _overrides,
        account,
    });
    return waitForUserOperationTransaction(client, { hash });
};
//# sourceMappingURL=sendTransactions.js.map
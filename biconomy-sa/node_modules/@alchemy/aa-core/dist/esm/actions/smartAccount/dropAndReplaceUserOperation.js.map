{"version":3,"file":"dropAndReplaceUserOperation.js","sourceRoot":"","sources":["../../../../src/actions/smartAccount/dropAndReplaceUserOperation.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,wBAAwB,EAAE,MAAM,sCAAsC,CAAC;AAEhF,OAAO,EAAE,oBAAoB,EAAE,MAAM,yBAAyB,CAAC;AAC/D,OAAO,EAAE,uBAAuB,EAAE,MAAM,wBAAwB,CAAC;AAEjE,OAAO,EAAE,SAAS,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAC;AAChE,OAAO,EAAE,mBAAmB,EAAE,MAAM,kCAAkC,CAAC;AACvE,OAAO,EAAE,kBAAkB,EAAE,MAAM,iCAAiC,CAAC;AAGrE,MAAM,CAAC,MAAM,2BAA2B,GASA,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE;IAC7D,MAAM,EAAE,OAAO,GAAG,MAAM,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC;IAC/D,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,MAAM,IAAI,oBAAoB,EAAE,CAAC;IACnC,CAAC;IACD,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,EAAE,CAAC;QACtC,MAAM,IAAI,uBAAuB,CAC/B,wBAAwB,EACxB,6BAA6B,CAC9B,CAAC;IACJ,CAAC;IAED,MAAM,UAAU,GAAG;QACjB,QAAQ,EAAE,QAAQ,CAAC,QAAQ;QAC3B,MAAM,EAAE,QAAQ,CAAC,MAAM;QACvB,KAAK,EAAE,QAAQ,CAAC,KAAK;QACrB,QAAQ,EAAE,QAAQ,CAAC,QAAQ;QAC3B,SAAS,EAAE,QAAQ,CAAC,SAAS;KACP,CAAC;IAIzB,MAAM,EAAE,YAAY,EAAE,oBAAoB,EAAE,GAAG,MAAM,mBAAmB,CACtE,MAAM,EACN;QACE,EAAE,EAAE,UAAU;QACd,SAAS;QACT,OAAO;KACR,CACF,CAAC;IAEF,MAAM,UAAU,GAA2B;QACzC,YAAY,EAAE,SAAS,CACrB,MAAM,CAAC,YAAY,IAAI,EAAE,CAAC,EAC1B,aAAa,CAAC,QAAQ,CAAC,YAAY,EAAE,IAAI,CAAC,CAC3C;QACD,oBAAoB,EAAE,SAAS,CAC7B,MAAM,CAAC,oBAAoB,IAAI,EAAE,CAAC,EAClC,aAAa,CAAC,QAAQ,CAAC,oBAAoB,EAAE,IAAI,CAAC,CACnD;KACF,CAAC;IAEF,MAAM,QAAQ,GAAG,MAAM,mBAAmB,CAAC,MAAM,EAAE;QACjD,EAAE,EAAE,UAAU;QACd,SAAS,EAAE,UAAU;QACrB,OAAO;KACR,CAAC,CAAC;IAEH,OAAO,kBAAkB,CAAC,MAAM,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAC;AACrE,CAAC,CAAC","sourcesContent":["import type { Chain, Client, Transport } from \"viem\";\nimport type { SmartContractAccount } from \"../../account/smartContractAccount\";\nimport { isBaseSmartAccountClient } from \"../../client/isSmartAccountClient.js\";\nimport type { SendUserOperationResult } from \"../../client/types\";\nimport { AccountNotFoundError } from \"../../errors/account.js\";\nimport { IncompatibleClientError } from \"../../errors/client.js\";\nimport type { UserOperationOverrides, UserOperationStruct } from \"../../types\";\nimport { bigIntMax, bigIntPercent } from \"../../utils/index.js\";\nimport { _runMiddlewareStack } from \"./internal/runMiddlewareStack.js\";\nimport { _sendUserOperation } from \"./internal/sendUserOperation.js\";\nimport type { DropAndReplaceUserOperationParameters } from \"./types\";\n\nexport const dropAndReplaceUserOperation: <\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined\n>(\n  client: Client<TTransport, TChain, TAccount>,\n  args: DropAndReplaceUserOperationParameters<TAccount>\n) => Promise<SendUserOperationResult> = async (client, args) => {\n  const { account = client.account, uoToDrop, overrides } = args;\n  if (!account) {\n    throw new AccountNotFoundError();\n  }\n  if (!isBaseSmartAccountClient(client)) {\n    throw new IncompatibleClientError(\n      \"BaseSmartAccountClient\",\n      \"dropAndReplaceUserOperation\"\n    );\n  }\n\n  const uoToSubmit = {\n    initCode: uoToDrop.initCode,\n    sender: uoToDrop.sender,\n    nonce: uoToDrop.nonce,\n    callData: uoToDrop.callData,\n    signature: uoToDrop.signature,\n  } as UserOperationStruct;\n\n  // Run once to get the fee estimates\n  // This can happen at any part of the middleware stack, so we want to run it all\n  const { maxFeePerGas, maxPriorityFeePerGas } = await _runMiddlewareStack(\n    client,\n    {\n      uo: uoToSubmit,\n      overrides,\n      account,\n    }\n  );\n\n  const _overrides: UserOperationOverrides = {\n    maxFeePerGas: bigIntMax(\n      BigInt(maxFeePerGas ?? 0n),\n      bigIntPercent(uoToDrop.maxFeePerGas, 110n)\n    ),\n    maxPriorityFeePerGas: bigIntMax(\n      BigInt(maxPriorityFeePerGas ?? 0n),\n      bigIntPercent(uoToDrop.maxPriorityFeePerGas, 110n)\n    ),\n  };\n\n  const uoToSend = await _runMiddlewareStack(client, {\n    uo: uoToSubmit,\n    overrides: _overrides,\n    account,\n  });\n\n  return _sendUserOperation(client, { uoStruct: uoToSend, account });\n};\n"]}
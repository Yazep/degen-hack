{"version":3,"file":"buildUserOperationFromTxs.js","sourceRoot":"","sources":["../../../../src/actions/smartAccount/buildUserOperationFromTxs.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAA2C,MAAM,MAAM,CAAC;AAExE,OAAO,EAAE,wBAAwB,EAAE,MAAM,sCAAsC,CAAC;AAChF,OAAO,EAAE,oBAAoB,EAAE,MAAM,yBAAyB,CAAC;AAC/D,OAAO,EAAE,uBAAuB,EAAE,MAAM,wBAAwB,CAAC;AACjE,OAAO,EAAE,8BAA8B,EAAE,MAAM,6BAA6B,CAAC;AAE7E,OAAO,EAAE,SAAS,EAAE,eAAe,EAAE,MAAM,sBAAsB,CAAC;AAMlE,MAAM,CAAC,MAAM,yBAAyB,GASmB,KAAK,EAC5D,MAAM,EACN,IAAI,EACJ,EAAE;IACF,MAAM,EAAE,OAAO,GAAG,MAAM,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC;IAC/D,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,MAAM,IAAI,oBAAoB,EAAE,CAAC;IACnC,CAAC;IAED,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,EAAE,CAAC;QACtC,MAAM,IAAI,uBAAuB,CAC/B,wBAAwB,EACxB,2BAA2B,CAC5B,CAAC;IACJ,CAAC;IAED,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE;QACrC,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC;YAChB,MAAM,IAAI,8BAA8B,EAAE,CAAC;QAC7C,CAAC;QAED,OAAO;YACL,MAAM,EAAE,OAAO,CAAC,EAAE;YAClB,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,IAAI;YAC1B,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE;SAC7D,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,MAAM,iBAAiB,GAAG,GAAG,EAAE,CAC7B,QAAQ;SACL,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,YAAY,IAAI,IAAI,CAAC;SACrC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,YAAa,EAAE,QAAQ,CAAC,CAAC,CAAC;IACpD,MAAM,YAAY,GAChB,SAAS,EAAE,YAAY,IAAI,IAAI;QAC7B,CAAC,CAAC,SAAS,EAAE,YAAY;QACzB,CAAC,CAAC,iBAAiB,EAAE,CAAC,MAAM,GAAG,CAAC;YAChC,CAAC,CAAC,SAAS,CAAC,GAAG,iBAAiB,EAAE,CAAC;YACnC,CAAC,CAAC,SAAS,CAAC;IAEhB,MAAM,kBAAkB,GAAG,GAAG,EAAE,CAC9B,QAAQ;SACL,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,oBAAoB,IAAI,IAAI,CAAC;SAC7C,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,oBAAqB,EAAE,QAAQ,CAAC,CAAC,CAAC;IAC5D,MAAM,oBAAoB,GACxB,SAAS,EAAE,oBAAoB,IAAI,IAAI;QACrC,CAAC,CAAC,SAAS,EAAE,oBAAoB;QACjC,CAAC,CAAC,kBAAkB,EAAE,CAAC,MAAM,GAAG,CAAC;YACjC,CAAC,CAAC,SAAS,CAAC,GAAG,kBAAkB,EAAE,CAAC;YACpC,CAAC,CAAC,SAAS,CAAC;IAEhB,MAAM,UAAU,GAA2B;QACzC,YAAY;QACZ,oBAAoB;KACrB,CAAC;IACF,eAAe,CAAC,UAAU,CAAC,CAAC;IAE5B,OAAO;QACL,KAAK;QACL,SAAS,EAAE,UAAU;KACtB,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { fromHex, type Chain, type Client, type Transport } from \"viem\";\nimport type { SmartContractAccount } from \"../../account/smartContractAccount\";\nimport { isBaseSmartAccountClient } from \"../../client/isSmartAccountClient.js\";\nimport { AccountNotFoundError } from \"../../errors/account.js\";\nimport { IncompatibleClientError } from \"../../errors/client.js\";\nimport { TransactionMissingToParamError } from \"../../errors/transaction.js\";\nimport type { UserOperationOverrides } from \"../../types\";\nimport { bigIntMax, filterUndefined } from \"../../utils/index.js\";\nimport type {\n  BuildUserOperationFromTransactionsResult,\n  SendTransactionsParameters,\n} from \"./types\";\n\nexport const buildUserOperationFromTxs: <\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined\n>(\n  client: Client<TTransport, TChain, TAccount>,\n  args: SendTransactionsParameters<TAccount>\n) => Promise<BuildUserOperationFromTransactionsResult> = async (\n  client,\n  args\n) => {\n  const { account = client.account, requests, overrides } = args;\n  if (!account) {\n    throw new AccountNotFoundError();\n  }\n\n  if (!isBaseSmartAccountClient(client)) {\n    throw new IncompatibleClientError(\n      \"BaseSmartAccountClient\",\n      \"buildUserOperationFromTxs\"\n    );\n  }\n\n  const batch = requests.map((request) => {\n    if (!request.to) {\n      throw new TransactionMissingToParamError();\n    }\n\n    return {\n      target: request.to,\n      data: request.data ?? \"0x\",\n      value: request.value ? fromHex(request.value, \"bigint\") : 0n,\n    };\n  });\n\n  const mfpgOverridesInTx = () =>\n    requests\n      .filter((x) => x.maxFeePerGas != null)\n      .map((x) => fromHex(x.maxFeePerGas!, \"bigint\"));\n  const maxFeePerGas =\n    overrides?.maxFeePerGas != null\n      ? overrides?.maxFeePerGas\n      : mfpgOverridesInTx().length > 0\n      ? bigIntMax(...mfpgOverridesInTx())\n      : undefined;\n\n  const mpfpgOverridesInTx = () =>\n    requests\n      .filter((x) => x.maxPriorityFeePerGas != null)\n      .map((x) => fromHex(x.maxPriorityFeePerGas!, \"bigint\"));\n  const maxPriorityFeePerGas =\n    overrides?.maxPriorityFeePerGas != null\n      ? overrides?.maxPriorityFeePerGas\n      : mpfpgOverridesInTx().length > 0\n      ? bigIntMax(...mpfpgOverridesInTx())\n      : undefined;\n\n  const _overrides: UserOperationOverrides = {\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n  };\n  filterUndefined(_overrides);\n\n  return {\n    batch,\n    overrides: _overrides,\n  };\n};\n"]}
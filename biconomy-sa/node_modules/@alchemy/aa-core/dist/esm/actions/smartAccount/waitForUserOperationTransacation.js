import { getTransaction } from "viem/actions";
import { isBaseSmartAccountClient } from "../../client/isSmartAccountClient.js";
import { IncompatibleClientError } from "../../errors/client.js";
import { FailedToFindTransactionError } from "../../errors/transaction.js";
import { Logger } from "../../logger.js";
export const waitForUserOperationTransaction = async (client, args) => {
    const { hash } = args;
    if (!isBaseSmartAccountClient(client)) {
        throw new IncompatibleClientError("BaseSmartAccountClient", "upgradeAccount");
    }
    for (let i = 0; i < client.txMaxRetries; i++) {
        const txRetryIntervalWithJitterMs = client.txRetryIntervalMs * Math.pow(client.txRetryMultiplier, i) +
            Math.random() * 100;
        await new Promise((resolve) => setTimeout(resolve, txRetryIntervalWithJitterMs));
        const receipt = await client
            .getUserOperationReceipt(hash)
            .catch((e) => {
            Logger.error(`[SmartAccountProvider] waitForUserOperationTransaction error fetching receipt for ${hash}: ${e}`);
        });
        if (receipt) {
            return getTransaction(client, {
                hash: receipt.receipt.transactionHash,
            }).then((x) => x.hash);
        }
    }
    throw new FailedToFindTransactionError(hash);
};
//# sourceMappingURL=waitForUserOperationTransacation.js.map
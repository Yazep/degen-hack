import { isBaseSmartAccountClient } from "../../client/isSmartAccountClient.js";
import { AccountNotFoundError } from "../../errors/account.js";
import { IncompatibleClientError } from "../../errors/client.js";
import { bigIntMax, bigIntPercent } from "../../utils/index.js";
import { _runMiddlewareStack } from "./internal/runMiddlewareStack.js";
import { _sendUserOperation } from "./internal/sendUserOperation.js";
export const dropAndReplaceUserOperation = async (client, args) => {
    const { account = client.account, uoToDrop, overrides } = args;
    if (!account) {
        throw new AccountNotFoundError();
    }
    if (!isBaseSmartAccountClient(client)) {
        throw new IncompatibleClientError("BaseSmartAccountClient", "dropAndReplaceUserOperation");
    }
    const uoToSubmit = {
        initCode: uoToDrop.initCode,
        sender: uoToDrop.sender,
        nonce: uoToDrop.nonce,
        callData: uoToDrop.callData,
        signature: uoToDrop.signature,
    };
    const { maxFeePerGas, maxPriorityFeePerGas } = await _runMiddlewareStack(client, {
        uo: uoToSubmit,
        overrides,
        account,
    });
    const _overrides = {
        maxFeePerGas: bigIntMax(BigInt(maxFeePerGas ?? 0n), bigIntPercent(uoToDrop.maxFeePerGas, 110n)),
        maxPriorityFeePerGas: bigIntMax(BigInt(maxPriorityFeePerGas ?? 0n), bigIntPercent(uoToDrop.maxPriorityFeePerGas, 110n)),
    };
    const uoToSend = await _runMiddlewareStack(client, {
        uo: uoToSubmit,
        overrides: _overrides,
        account,
    });
    return _sendUserOperation(client, { uoStruct: uoToSend, account });
};
//# sourceMappingURL=dropAndReplaceUserOperation.js.map
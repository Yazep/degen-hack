import { AccountNotFoundError } from "../../../errors/account.js";
import { ChainNotFoundError } from "../../../errors/client.js";
import { InvalidUserOperationError } from "../../../errors/useroperation.js";
import { deepHexlify, getUserOperationHash, isValidRequest, } from "../../../utils/index.js";
export const _sendUserOperation = async (client, args) => {
    const { account = client.account } = args;
    if (!account) {
        throw new AccountNotFoundError();
    }
    if (!client.chain) {
        throw new ChainNotFoundError();
    }
    const request = deepHexlify(args.uoStruct);
    if (!isValidRequest(request)) {
        throw new InvalidUserOperationError(args.uoStruct);
    }
    request.signature = await account.signUserOperationHash(getUserOperationHash(request, account.getEntrypoint(), BigInt(client.chain.id)));
    return {
        hash: await client.sendRawUserOperation(request, account.getEntrypoint()),
        request,
    };
};
//# sourceMappingURL=sendUserOperation.js.map
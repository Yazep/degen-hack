import { type Chain, type Client, type ClientConfig, type CustomTransport, type PublicActions, type PublicRpcSchema, type RpcSchema, type Transport } from "viem";
import { z } from "zod";
import type { SmartContractAccount } from "../account/smartContractAccount.js";
import type { ClientMiddleware } from "../middleware/types.js";
import type { Prettify } from "../utils/index.js";
import { type BundlerClient } from "./bundlerClient.js";
import { type BundlerActions, type BundlerRpcSchema } from "./decorators/bundlerClient.js";
import { type BaseSmartAccountClientActions } from "./decorators/smartAccountClient.js";
import { SmartAccountClientOptsSchema } from "./schema.js";
import type { ClientMiddlewareConfig } from "./types.js";
type SmartAccountClientOpts = z.output<typeof SmartAccountClientOptsSchema>;
export type SmartAccountClientConfig<transport extends Transport = Transport, chain extends Chain | undefined = Chain | undefined, account extends SmartContractAccount | undefined = SmartContractAccount | undefined> = Prettify<Pick<ClientConfig<transport, chain, account>, "cacheTime" | "chain" | "key" | "name" | "pollingInterval" | "transport"> & {
    account?: account;
    opts?: z.input<typeof SmartAccountClientOptsSchema>;
} & ClientMiddlewareConfig>;
export type SmartAccountClientRpcSchema = [
    ...BundlerRpcSchema,
    ...PublicRpcSchema
];
export type SmartAccountClientActions<chain extends Chain | undefined = Chain | undefined, account extends SmartContractAccount | undefined = SmartContractAccount | undefined> = BaseSmartAccountClientActions<chain, account> & BundlerActions & PublicActions;
export type SmartAccountClient<transport extends Transport = Transport, chain extends Chain | undefined = Chain | undefined, account extends SmartContractAccount | undefined = SmartContractAccount | undefined, actions extends SmartAccountClientActions<chain, account> = SmartAccountClientActions<chain, account>, rpcSchema extends RpcSchema = SmartAccountClientRpcSchema> = Prettify<Client<transport, chain, account, rpcSchema, actions>>;
export type BaseSmartAccountClient<transport extends Transport = Transport, chain extends Chain | undefined = Chain | undefined, account extends SmartContractAccount | undefined = SmartContractAccount | undefined> = Prettify<Client<transport, chain, account, [
    ...BundlerRpcSchema,
    ...PublicRpcSchema
], {
    middleware: ClientMiddleware;
} & SmartAccountClientOpts & BundlerActions & PublicActions>>;
export declare function createSmartAccountClient<TTransport extends Transport = Transport, TChain extends Chain | undefined = Chain | undefined, TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined>(config: SmartAccountClientConfig<TTransport, TChain, TAccount>): SmartAccountClient<TTransport, TChain, TAccount>;
export declare function createSmartAccountClientFromExisting<TTransport extends Transport = Transport, TChain extends Chain | undefined = Chain | undefined, TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined, TClient extends BundlerClient<TTransport> = BundlerClient<TTransport>, TActions extends SmartAccountClientActions<TChain, TAccount> = SmartAccountClientActions<TChain, TAccount>, TRpcSchema extends SmartAccountClientRpcSchema = SmartAccountClientRpcSchema>(config: Omit<SmartAccountClientConfig<Transport, TChain, TAccount>, "transport" | "chain"> & {
    client: TClient;
}): SmartAccountClient<CustomTransport, TChain, TAccount, TActions, TRpcSchema>;
export {};
//# sourceMappingURL=smartAccountClient.d.ts.map